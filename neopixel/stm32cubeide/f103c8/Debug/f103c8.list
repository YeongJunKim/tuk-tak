
f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002484  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b4  080025b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025b4  080025b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b4  080025b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  0800262c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800262c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db06  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4e  00000000  00000000  0002db9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  00030240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001535d  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008063  00000000  00000000  00045e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070103  00000000  00000000  0004de88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdf8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  000be008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002578 	.word	0x08002578

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002578 	.word	0x08002578

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fff8 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
 800047c:	e043      	b.n	8000506 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	461a      	mov	r2, r3
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <HAL_DMA_Init+0xa8>)
 8000486:	4413      	add	r3, r2
 8000488:	4a22      	ldr	r2, [pc, #136]	; (8000514 <HAL_DMA_Init+0xac>)
 800048a:	fba2 2303 	umull	r2, r3, r2, r3
 800048e:	091b      	lsrs	r3, r3, #4
 8000490:	009a      	lsls	r2, r3, #2
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <HAL_DMA_Init+0xb0>)
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2202      	movs	r2, #2
 80004a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	bffdfff8 	.word	0xbffdfff8
 8000514:	cccccccd 	.word	0xcccccccd
 8000518:	40020000 	.word	0x40020000

0800051c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d101      	bne.n	800053c <HAL_DMA_Start_IT+0x20>
 8000538:	2302      	movs	r3, #2
 800053a:	e04a      	b.n	80005d2 <HAL_DMA_Start_IT+0xb6>
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2201      	movs	r2, #1
 8000540:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054a:	2b01      	cmp	r3, #1
 800054c:	d13a      	bne.n	80005c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2202      	movs	r2, #2
 8000552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2200      	movs	r2, #0
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f022 0201 	bic.w	r2, r2, #1
 800056a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f000 f938 	bl	80007e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057c:	2b00      	cmp	r3, #0
 800057e:	d008      	beq.n	8000592 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f042 020e 	orr.w	r2, r2, #14
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e00f      	b.n	80005b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f022 0204 	bic.w	r2, r2, #4
 80005a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f042 020a 	orr.w	r2, r2, #10
 80005b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f042 0201 	orr.w	r2, r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	e005      	b.n	80005d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80005cc:	2302      	movs	r3, #2
 80005ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	2204      	movs	r2, #4
 80005fa:	409a      	lsls	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4013      	ands	r3, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d04f      	beq.n	80006a4 <HAL_DMA_IRQHandler+0xc8>
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	2b00      	cmp	r3, #0
 800060c:	d04a      	beq.n	80006a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d107      	bne.n	800062c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f022 0204 	bic.w	r2, r2, #4
 800062a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a66      	ldr	r2, [pc, #408]	; (80007cc <HAL_DMA_IRQHandler+0x1f0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d029      	beq.n	800068a <HAL_DMA_IRQHandler+0xae>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a65      	ldr	r2, [pc, #404]	; (80007d0 <HAL_DMA_IRQHandler+0x1f4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d022      	beq.n	8000686 <HAL_DMA_IRQHandler+0xaa>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a63      	ldr	r2, [pc, #396]	; (80007d4 <HAL_DMA_IRQHandler+0x1f8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d01a      	beq.n	8000680 <HAL_DMA_IRQHandler+0xa4>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a62      	ldr	r2, [pc, #392]	; (80007d8 <HAL_DMA_IRQHandler+0x1fc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d012      	beq.n	800067a <HAL_DMA_IRQHandler+0x9e>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a60      	ldr	r2, [pc, #384]	; (80007dc <HAL_DMA_IRQHandler+0x200>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d00a      	beq.n	8000674 <HAL_DMA_IRQHandler+0x98>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a5f      	ldr	r2, [pc, #380]	; (80007e0 <HAL_DMA_IRQHandler+0x204>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d102      	bne.n	800066e <HAL_DMA_IRQHandler+0x92>
 8000668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066c:	e00e      	b.n	800068c <HAL_DMA_IRQHandler+0xb0>
 800066e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000672:	e00b      	b.n	800068c <HAL_DMA_IRQHandler+0xb0>
 8000674:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000678:	e008      	b.n	800068c <HAL_DMA_IRQHandler+0xb0>
 800067a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800067e:	e005      	b.n	800068c <HAL_DMA_IRQHandler+0xb0>
 8000680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000684:	e002      	b.n	800068c <HAL_DMA_IRQHandler+0xb0>
 8000686:	2340      	movs	r3, #64	; 0x40
 8000688:	e000      	b.n	800068c <HAL_DMA_IRQHandler+0xb0>
 800068a:	2304      	movs	r3, #4
 800068c:	4a55      	ldr	r2, [pc, #340]	; (80007e4 <HAL_DMA_IRQHandler+0x208>)
 800068e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000694:	2b00      	cmp	r3, #0
 8000696:	f000 8094 	beq.w	80007c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80006a2:	e08e      	b.n	80007c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	2202      	movs	r2, #2
 80006aa:	409a      	lsls	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d056      	beq.n	8000762 <HAL_DMA_IRQHandler+0x186>
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d051      	beq.n	8000762 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10b      	bne.n	80006e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f022 020a 	bic.w	r2, r2, #10
 80006da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a38      	ldr	r2, [pc, #224]	; (80007cc <HAL_DMA_IRQHandler+0x1f0>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d029      	beq.n	8000742 <HAL_DMA_IRQHandler+0x166>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a37      	ldr	r2, [pc, #220]	; (80007d0 <HAL_DMA_IRQHandler+0x1f4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d022      	beq.n	800073e <HAL_DMA_IRQHandler+0x162>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a35      	ldr	r2, [pc, #212]	; (80007d4 <HAL_DMA_IRQHandler+0x1f8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d01a      	beq.n	8000738 <HAL_DMA_IRQHandler+0x15c>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <HAL_DMA_IRQHandler+0x1fc>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d012      	beq.n	8000732 <HAL_DMA_IRQHandler+0x156>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a32      	ldr	r2, [pc, #200]	; (80007dc <HAL_DMA_IRQHandler+0x200>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d00a      	beq.n	800072c <HAL_DMA_IRQHandler+0x150>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <HAL_DMA_IRQHandler+0x204>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d102      	bne.n	8000726 <HAL_DMA_IRQHandler+0x14a>
 8000720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000724:	e00e      	b.n	8000744 <HAL_DMA_IRQHandler+0x168>
 8000726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800072a:	e00b      	b.n	8000744 <HAL_DMA_IRQHandler+0x168>
 800072c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000730:	e008      	b.n	8000744 <HAL_DMA_IRQHandler+0x168>
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	e005      	b.n	8000744 <HAL_DMA_IRQHandler+0x168>
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	e002      	b.n	8000744 <HAL_DMA_IRQHandler+0x168>
 800073e:	2320      	movs	r3, #32
 8000740:	e000      	b.n	8000744 <HAL_DMA_IRQHandler+0x168>
 8000742:	2302      	movs	r3, #2
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <HAL_DMA_IRQHandler+0x208>)
 8000746:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000754:	2b00      	cmp	r3, #0
 8000756:	d034      	beq.n	80007c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000760:	e02f      	b.n	80007c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	2208      	movs	r2, #8
 8000768:	409a      	lsls	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4013      	ands	r3, r2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d028      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x1e8>
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d023      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f022 020e 	bic.w	r2, r2, #14
 800078a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	4798      	blx	r3
    }
  }
  return;
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
}
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020008 	.word	0x40020008
 80007d0:	4002001c 	.word	0x4002001c
 80007d4:	40020030 	.word	0x40020030
 80007d8:	40020044 	.word	0x40020044
 80007dc:	40020058 	.word	0x40020058
 80007e0:	4002006c 	.word	0x4002006c
 80007e4:	40020000 	.word	0x40020000

080007e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b10      	cmp	r3, #16
 8000814:	d108      	bne.n	8000828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000826:	e007      	b.n	8000838 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	60da      	str	r2, [r3, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b08b      	sub	sp, #44	; 0x2c
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
 8000866:	e127      	b.n	8000ab8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000868:	2201      	movs	r2, #1
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8116 	bne.w	8000ab2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b12      	cmp	r3, #18
 800088c:	d034      	beq.n	80008f8 <HAL_GPIO_Init+0xb4>
 800088e:	2b12      	cmp	r3, #18
 8000890:	d80d      	bhi.n	80008ae <HAL_GPIO_Init+0x6a>
 8000892:	2b02      	cmp	r3, #2
 8000894:	d02b      	beq.n	80008ee <HAL_GPIO_Init+0xaa>
 8000896:	2b02      	cmp	r3, #2
 8000898:	d804      	bhi.n	80008a4 <HAL_GPIO_Init+0x60>
 800089a:	2b00      	cmp	r3, #0
 800089c:	d031      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d01c      	beq.n	80008dc <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008a2:	e048      	b.n	8000936 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d043      	beq.n	8000930 <HAL_GPIO_Init+0xec>
 80008a8:	2b11      	cmp	r3, #17
 80008aa:	d01b      	beq.n	80008e4 <HAL_GPIO_Init+0xa0>
          break;
 80008ac:	e043      	b.n	8000936 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80008ae:	4a87      	ldr	r2, [pc, #540]	; (8000acc <HAL_GPIO_Init+0x288>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d026      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
 80008b4:	4a85      	ldr	r2, [pc, #532]	; (8000acc <HAL_GPIO_Init+0x288>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d806      	bhi.n	80008c8 <HAL_GPIO_Init+0x84>
 80008ba:	4a85      	ldr	r2, [pc, #532]	; (8000ad0 <HAL_GPIO_Init+0x28c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d020      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
 80008c0:	4a84      	ldr	r2, [pc, #528]	; (8000ad4 <HAL_GPIO_Init+0x290>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d01d      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
          break;
 80008c6:	e036      	b.n	8000936 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80008c8:	4a83      	ldr	r2, [pc, #524]	; (8000ad8 <HAL_GPIO_Init+0x294>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d019      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
 80008ce:	4a83      	ldr	r2, [pc, #524]	; (8000adc <HAL_GPIO_Init+0x298>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d016      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
 80008d4:	4a82      	ldr	r2, [pc, #520]	; (8000ae0 <HAL_GPIO_Init+0x29c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d013      	beq.n	8000902 <HAL_GPIO_Init+0xbe>
          break;
 80008da:	e02c      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	623b      	str	r3, [r7, #32]
          break;
 80008e2:	e028      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	3304      	adds	r3, #4
 80008ea:	623b      	str	r3, [r7, #32]
          break;
 80008ec:	e023      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	3308      	adds	r3, #8
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e01e      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	330c      	adds	r3, #12
 80008fe:	623b      	str	r3, [r7, #32]
          break;
 8000900:	e019      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d102      	bne.n	8000910 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800090a:	2304      	movs	r3, #4
 800090c:	623b      	str	r3, [r7, #32]
          break;
 800090e:	e012      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d105      	bne.n	8000924 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000918:	2308      	movs	r3, #8
 800091a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	611a      	str	r2, [r3, #16]
          break;
 8000922:	e008      	b.n	8000936 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000924:	2308      	movs	r3, #8
 8000926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	615a      	str	r2, [r3, #20]
          break;
 800092e:	e002      	b.n	8000936 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
          break;
 8000934:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2bff      	cmp	r3, #255	; 0xff
 800093a:	d801      	bhi.n	8000940 <HAL_GPIO_Init+0xfc>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	e001      	b.n	8000944 <HAL_GPIO_Init+0x100>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3304      	adds	r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	2bff      	cmp	r3, #255	; 0xff
 800094a:	d802      	bhi.n	8000952 <HAL_GPIO_Init+0x10e>
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	e002      	b.n	8000958 <HAL_GPIO_Init+0x114>
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	3b08      	subs	r3, #8
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	210f      	movs	r1, #15
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	401a      	ands	r2, r3
 800096a:	6a39      	ldr	r1, [r7, #32]
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	431a      	orrs	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 8096 	beq.w	8000ab2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000986:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <HAL_GPIO_Init+0x2a0>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a56      	ldr	r2, [pc, #344]	; (8000ae4 <HAL_GPIO_Init+0x2a0>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <HAL_GPIO_Init+0x2a0>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800099e:	4a52      	ldr	r2, [pc, #328]	; (8000ae8 <HAL_GPIO_Init+0x2a4>)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	3302      	adds	r3, #2
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	220f      	movs	r2, #15
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	4013      	ands	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a49      	ldr	r2, [pc, #292]	; (8000aec <HAL_GPIO_Init+0x2a8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x1ae>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a48      	ldr	r2, [pc, #288]	; (8000af0 <HAL_GPIO_Init+0x2ac>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x1aa>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x1a6>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a46      	ldr	r2, [pc, #280]	; (8000af8 <HAL_GPIO_Init+0x2b4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x1a2>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e006      	b.n	80009f4 <HAL_GPIO_Init+0x1b0>
 80009e6:	2304      	movs	r3, #4
 80009e8:	e004      	b.n	80009f4 <HAL_GPIO_Init+0x1b0>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e002      	b.n	80009f4 <HAL_GPIO_Init+0x1b0>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <HAL_GPIO_Init+0x1b0>
 80009f2:	2300      	movs	r3, #0
 80009f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f6:	f002 0203 	and.w	r2, r2, #3
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	4093      	lsls	r3, r2
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000a04:	4938      	ldr	r1, [pc, #224]	; (8000ae8 <HAL_GPIO_Init+0x2a4>)
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d006      	beq.n	8000a2c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a1e:	4b37      	ldr	r3, [pc, #220]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4936      	ldr	r1, [pc, #216]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	600b      	str	r3, [r1, #0]
 8000a2a:	e006      	b.n	8000a3a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a2c:	4b33      	ldr	r3, [pc, #204]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	4931      	ldr	r1, [pc, #196]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	492c      	ldr	r1, [pc, #176]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	604b      	str	r3, [r1, #4]
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4927      	ldr	r1, [pc, #156]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	4922      	ldr	r1, [pc, #136]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	608b      	str	r3, [r1, #8]
 8000a7a:	e006      	b.n	8000a8a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	491d      	ldr	r1, [pc, #116]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	4918      	ldr	r1, [pc, #96]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	60cb      	str	r3, [r1, #12]
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	4913      	ldr	r1, [pc, #76]	; (8000afc <HAL_GPIO_Init+0x2b8>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	f67f aed4 	bls.w	8000868 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	372c      	adds	r7, #44	; 0x2c
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	10120000 	.word	0x10120000
 8000ad8:	10310000 	.word	0x10310000
 8000adc:	10320000 	.word	0x10320000
 8000ae0:	10220000 	.word	0x10220000
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40011400 	.word	0x40011400
 8000afc:	40010400 	.word	0x40010400

08000b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b1c:	e003      	b.n	8000b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	041a      	lsls	r2, r3, #16
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	611a      	str	r2, [r3, #16]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	405a      	eors	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60da      	str	r2, [r3, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 8087 	beq.w	8000c7c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b6e:	4b92      	ldr	r3, [pc, #584]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 030c 	and.w	r3, r3, #12
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d00c      	beq.n	8000b94 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b7a:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d112      	bne.n	8000bac <HAL_RCC_OscConfig+0x58>
 8000b86:	4b8c      	ldr	r3, [pc, #560]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d10b      	bne.n	8000bac <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b94:	4b88      	ldr	r3, [pc, #544]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d06c      	beq.n	8000c7a <HAL_RCC_OscConfig+0x126>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d168      	bne.n	8000c7a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e22d      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb4:	d106      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x70>
 8000bb6:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a7f      	ldr	r2, [pc, #508]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e02e      	b.n	8000c22 <HAL_RCC_OscConfig+0xce>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10c      	bne.n	8000be6 <HAL_RCC_OscConfig+0x92>
 8000bcc:	4b7a      	ldr	r3, [pc, #488]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a79      	ldr	r2, [pc, #484]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b77      	ldr	r3, [pc, #476]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a76      	ldr	r2, [pc, #472]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e01d      	b.n	8000c22 <HAL_RCC_OscConfig+0xce>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bee:	d10c      	bne.n	8000c0a <HAL_RCC_OscConfig+0xb6>
 8000bf0:	4b71      	ldr	r3, [pc, #452]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a70      	ldr	r2, [pc, #448]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b6e      	ldr	r3, [pc, #440]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a6d      	ldr	r2, [pc, #436]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e00b      	b.n	8000c22 <HAL_RCC_OscConfig+0xce>
 8000c0a:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6a      	ldr	r2, [pc, #424]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d013      	beq.n	8000c52 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fae7 	bl	80001fc <HAL_GetTick>
 8000c2e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c30:	e008      	b.n	8000c44 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c32:	f7ff fae3 	bl	80001fc <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b64      	cmp	r3, #100	; 0x64
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e1e1      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c44:	4b5c      	ldr	r3, [pc, #368]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f0      	beq.n	8000c32 <HAL_RCC_OscConfig+0xde>
 8000c50:	e014      	b.n	8000c7c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c52:	f7ff fad3 	bl	80001fc <HAL_GetTick>
 8000c56:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5a:	f7ff facf 	bl	80001fc <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b64      	cmp	r3, #100	; 0x64
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e1cd      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6c:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f0      	bne.n	8000c5a <HAL_RCC_OscConfig+0x106>
 8000c78:	e000      	b.n	8000c7c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d063      	beq.n	8000d50 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c88:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00b      	beq.n	8000cac <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c94:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d11c      	bne.n	8000cda <HAL_RCC_OscConfig+0x186>
 8000ca0:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d116      	bne.n	8000cda <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cac:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x170>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d001      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e1a1      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4b3c      	ldr	r3, [pc, #240]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4939      	ldr	r1, [pc, #228]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd8:	e03a      	b.n	8000d50 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d020      	beq.n	8000d24 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_RCC_OscConfig+0x268>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fa88 	bl	80001fc <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf0:	f7ff fa84 	bl	80001fc <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e182      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f0      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4926      	ldr	r1, [pc, #152]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
 8000d22:	e015      	b.n	8000d50 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <HAL_RCC_OscConfig+0x268>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fa67 	bl	80001fc <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fa63 	bl	80001fc <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e161      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f0      	bne.n	8000d32 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d039      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d019      	beq.n	8000d98 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fa47 	bl	80001fc <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d70:	e008      	b.n	8000d84 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d72:	f7ff fa43 	bl	80001fc <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e141      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_RCC_OscConfig+0x264>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f000 fab1 	bl	80012f8 <RCC_Delay>
 8000d96:	e01b      	b.n	8000dd0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fa2d 	bl	80001fc <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	e00e      	b.n	8000dc4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da6:	f7ff fa29 	bl	80001fc <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d907      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e127      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	42420000 	.word	0x42420000
 8000dc0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc4:	4b92      	ldr	r3, [pc, #584]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1ea      	bne.n	8000da6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a6 	beq.w	8000f2a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de2:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10d      	bne.n	8000e0a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b88      	ldr	r3, [pc, #544]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a87      	ldr	r2, [pc, #540]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b85      	ldr	r3, [pc, #532]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e06:	2301      	movs	r3, #1
 8000e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0a:	4b82      	ldr	r3, [pc, #520]	; (8001014 <HAL_RCC_OscConfig+0x4c0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d118      	bne.n	8000e48 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e16:	4b7f      	ldr	r3, [pc, #508]	; (8001014 <HAL_RCC_OscConfig+0x4c0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a7e      	ldr	r2, [pc, #504]	; (8001014 <HAL_RCC_OscConfig+0x4c0>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e22:	f7ff f9eb 	bl	80001fc <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2a:	f7ff f9e7 	bl	80001fc <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b64      	cmp	r3, #100	; 0x64
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e0e5      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	4b75      	ldr	r3, [pc, #468]	; (8001014 <HAL_RCC_OscConfig+0x4c0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f0      	beq.n	8000e2a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d106      	bne.n	8000e5e <HAL_RCC_OscConfig+0x30a>
 8000e50:	4b6f      	ldr	r3, [pc, #444]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6213      	str	r3, [r2, #32]
 8000e5c:	e02d      	b.n	8000eba <HAL_RCC_OscConfig+0x366>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x32c>
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a69      	ldr	r2, [pc, #420]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	6213      	str	r3, [r2, #32]
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	4a66      	ldr	r2, [pc, #408]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e78:	f023 0304 	bic.w	r3, r3, #4
 8000e7c:	6213      	str	r3, [r2, #32]
 8000e7e:	e01c      	b.n	8000eba <HAL_RCC_OscConfig+0x366>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d10c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x34e>
 8000e88:	4b61      	ldr	r3, [pc, #388]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a60      	ldr	r2, [pc, #384]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6213      	str	r3, [r2, #32]
 8000e94:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a5d      	ldr	r2, [pc, #372]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	e00b      	b.n	8000eba <HAL_RCC_OscConfig+0x366>
 8000ea2:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a5a      	ldr	r2, [pc, #360]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000eb4:	f023 0304 	bic.w	r3, r3, #4
 8000eb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d015      	beq.n	8000eee <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff f99b 	bl	80001fc <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff f997 	bl	80001fc <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e093      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee0:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0ee      	beq.n	8000eca <HAL_RCC_OscConfig+0x376>
 8000eec:	e014      	b.n	8000f18 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff f985 	bl	80001fc <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff f981 	bl	80001fc <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e07d      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0c:	4b40      	ldr	r3, [pc, #256]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1ee      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d105      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d069      	beq.n	8001006 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d061      	beq.n	8001002 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d146      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff f956 	bl	80001fc <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f54:	f7ff f952 	bl	80001fc <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e050      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7a:	d108      	bne.n	8000f8e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4921      	ldr	r1, [pc, #132]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a19      	ldr	r1, [r3, #32]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	491b      	ldr	r1, [pc, #108]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff f926 	bl	80001fc <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb4:	f7ff f922 	bl	80001fc <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e020      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x460>
 8000fd2:	e018      	b.n	8001006 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff f90f 	bl	80001fc <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff f90b 	bl	80001fc <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e009      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_RCC_OscConfig+0x4bc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x48e>
 8001000:	e001      	b.n	8001006 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	40007000 	.word	0x40007000
 8001018:	42420060 	.word	0x42420060

0800101c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800102a:	4b7e      	ldr	r3, [pc, #504]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d910      	bls.n	800105a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001038:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 0207 	bic.w	r2, r3, #7
 8001040:	4978      	ldr	r1, [pc, #480]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001048:	4b76      	ldr	r3, [pc, #472]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d001      	beq.n	800105a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0e0      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d020      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001072:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a6c      	ldr	r2, [pc, #432]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001078:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800107c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a66      	ldr	r2, [pc, #408]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001090:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001094:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001096:	4b64      	ldr	r3, [pc, #400]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	4961      	ldr	r1, [pc, #388]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d06a      	beq.n	800118a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d107      	bne.n	80010cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010bc:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d115      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0a7      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d107      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e09b      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e093      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f4:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f023 0203 	bic.w	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4949      	ldr	r1, [pc, #292]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001106:	f7ff f879 	bl	80001fc <HAL_GetTick>
 800110a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d112      	bne.n	800113a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001114:	e00a      	b.n	800112c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001116:	f7ff f871 	bl	80001fc <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e077      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b04      	cmp	r3, #4
 8001136:	d1ee      	bne.n	8001116 <HAL_RCC_ClockConfig+0xfa>
 8001138:	e027      	b.n	800118a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d11d      	bne.n	800117e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001142:	e00a      	b.n	800115a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001144:	f7ff f85a 	bl	80001fc <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001152:	4293      	cmp	r3, r2
 8001154:	d901      	bls.n	800115a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e060      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d1ee      	bne.n	8001144 <HAL_RCC_ClockConfig+0x128>
 8001166:	e010      	b.n	800118a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff f848 	bl	80001fc <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e04e      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1ee      	bne.n	8001168 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d210      	bcs.n	80011ba <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 0207 	bic.w	r2, r3, #7
 80011a0:	4920      	ldr	r1, [pc, #128]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_RCC_ClockConfig+0x208>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e030      	b.n	800121c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d008      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4915      	ldr	r1, [pc, #84]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d009      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f8:	f000 f81c 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 80011fc:	4601      	mov	r1, r0
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_RCC_ClockConfig+0x20c>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_RCC_ClockConfig+0x210>)
 800120a:	5cd3      	ldrb	r3, [r2, r3]
 800120c:	fa21 f303 	lsr.w	r3, r1, r3
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_RCC_ClockConfig+0x214>)
 8001212:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001214:	2000      	movs	r0, #0
 8001216:	f7fe ffaf 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40022000 	.word	0x40022000
 8001228:	40021000 	.word	0x40021000
 800122c:	080025a4 	.word	0x080025a4
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	b490      	push	{r4, r7}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800123c:	1d3c      	adds	r4, r7, #4
 800123e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d002      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0x40>
 800126e:	2b08      	cmp	r3, #8
 8001270:	d003      	beq.n	800127a <HAL_RCC_GetSysClockFreq+0x46>
 8001272:	e02d      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001276:	623b      	str	r3, [r7, #32]
      break;
 8001278:	e02d      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001286:	4413      	add	r3, r2
 8001288:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800128c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	0c5b      	lsrs	r3, r3, #17
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012a6:	4413      	add	r3, r2
 80012a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012ac:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012b2:	fb02 f203 	mul.w	r2, r2, r3
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	e004      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	623b      	str	r3, [r7, #32]
      break;
 80012ce:	e002      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012d2:	623b      	str	r3, [r7, #32]
      break;
 80012d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d6:	6a3b      	ldr	r3, [r7, #32]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	08002590 	.word	0x08002590
 80012e8:	080025a0 	.word	0x080025a0
 80012ec:	40021000 	.word	0x40021000
 80012f0:	007a1200 	.word	0x007a1200
 80012f4:	003d0900 	.word	0x003d0900

080012f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <RCC_Delay+0x34>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <RCC_Delay+0x38>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001314:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	60fa      	str	r2, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f9      	bne.n	8001314 <RCC_Delay+0x1c>
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	10624dd3 	.word	0x10624dd3

08001334 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e01d      	b.n	8001382 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 ff30 	bl	80021c0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f000 fa02 	bl	800177c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0bc      	b.n	8001524 <HAL_TIM_PWM_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d104      	bne.n	80013c6 <HAL_TIM_PWM_Start_DMA+0x3a>
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0ae      	b.n	8001524 <HAL_TIM_PWM_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	f200 8089 	bhi.w	80014e8 <HAL_TIM_PWM_Start_DMA+0x15c>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_TIM_PWM_Start_DMA+0x50>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014e9 	.word	0x080014e9
 80013e4:	080014e9 	.word	0x080014e9
 80013e8:	080014e9 	.word	0x080014e9
 80013ec:	08001447 	.word	0x08001447
 80013f0:	080014e9 	.word	0x080014e9
 80013f4:	080014e9 	.word	0x080014e9
 80013f8:	080014e9 	.word	0x080014e9
 80013fc:	0800147d 	.word	0x0800147d
 8001400:	080014e9 	.word	0x080014e9
 8001404:	080014e9 	.word	0x080014e9
 8001408:	080014e9 	.word	0x080014e9
 800140c:	080014b3 	.word	0x080014b3
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <HAL_TIM_PWM_Start_DMA+0x1a0>)
 8001416:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	4a44      	ldr	r2, [pc, #272]	; (8001530 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800141e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3334      	adds	r3, #52	; 0x34
 800142c:	461a      	mov	r2, r3
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	f7ff f874 	bl	800051c <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001442:	60da      	str	r2, [r3, #12]
    }
    break;
 8001444:	e051      	b.n	80014ea <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	4a38      	ldr	r2, [pc, #224]	; (800152c <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800144c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	4a37      	ldr	r2, [pc, #220]	; (8001530 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 8001454:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3338      	adds	r3, #56	; 0x38
 8001462:	461a      	mov	r2, r3
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	f7ff f859 	bl	800051c <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001478:	60da      	str	r2, [r3, #12]
    }
    break;
 800147a:	e036      	b.n	80014ea <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_TIM_PWM_Start_DMA+0x1a0>)
 8001482:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800148a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	333c      	adds	r3, #60	; 0x3c
 8001498:	461a      	mov	r2, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	f7ff f83e 	bl	800051c <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ae:	60da      	str	r2, [r3, #12]
    }
    break;
 80014b0:	e01b      	b.n	80014ea <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_TIM_PWM_Start_DMA+0x1a0>)
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3340      	adds	r3, #64	; 0x40
 80014ce:	461a      	mov	r2, r3
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	f7ff f823 	bl	800051c <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014e4:	60da      	str	r2, [r3, #12]
    }
    break;
 80014e6:	e000      	b.n	80014ea <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 80014e8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fb48 	bl	8001b88 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_TIM_PWM_Start_DMA+0x1a8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d107      	bne.n	8001512 <HAL_TIM_PWM_Start_DMA+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0800170d 	.word	0x0800170d
 8001530:	080016e9 	.word	0x080016e9
 8001534:	40012c00 	.word	0x40012c00

08001538 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800154e:	2302      	movs	r3, #2
 8001550:	e0b4      	b.n	80016bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	f200 809f 	bhi.w	80016a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015a5 	.word	0x080015a5
 8001574:	080016a9 	.word	0x080016a9
 8001578:	080016a9 	.word	0x080016a9
 800157c:	080016a9 	.word	0x080016a9
 8001580:	080015e5 	.word	0x080015e5
 8001584:	080016a9 	.word	0x080016a9
 8001588:	080016a9 	.word	0x080016a9
 800158c:	080016a9 	.word	0x080016a9
 8001590:	08001627 	.word	0x08001627
 8001594:	080016a9 	.word	0x080016a9
 8001598:	080016a9 	.word	0x080016a9
 800159c:	080016a9 	.word	0x080016a9
 80015a0:	08001667 	.word	0x08001667
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f94c 	bl	8001848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0208 	orr.w	r2, r2, #8
 80015be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0204 	bic.w	r2, r2, #4
 80015ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6999      	ldr	r1, [r3, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	619a      	str	r2, [r3, #24]
    }
    break;
 80015e2:	e062      	b.n	80016aa <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f998 	bl	8001920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800160e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6999      	ldr	r1, [r3, #24]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	021a      	lsls	r2, r3, #8
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	619a      	str	r2, [r3, #24]
    }
    break;
 8001624:	e041      	b.n	80016aa <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f9e7 	bl	8001a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0208 	orr.w	r2, r2, #8
 8001640:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0204 	bic.w	r2, r2, #4
 8001650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	69d9      	ldr	r1, [r3, #28]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	61da      	str	r2, [r3, #28]
    }
    break;
 8001664:	e021      	b.n	80016aa <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fa37 	bl	8001ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69da      	ldr	r2, [r3, #28]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001680:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69d9      	ldr	r1, [r3, #28]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	021a      	lsls	r2, r3, #8
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	61da      	str	r2, [r3, #28]
    }
    break;
 80016a6:	e000      	b.n	80016aa <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80016a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff ffe9 	bl	80016d6 <HAL_TIM_ErrorCallback>
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	d103      	bne.n	8001734 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	771a      	strb	r2, [r3, #28]
 8001732:	e019      	b.n	8001768 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	d103      	bne.n	8001746 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2202      	movs	r2, #2
 8001742:	771a      	strb	r2, [r3, #28]
 8001744:	e010      	b.n	8001768 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	d103      	bne.n	8001758 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2204      	movs	r2, #4
 8001754:	771a      	strb	r2, [r3, #28]
 8001756:	e007      	b.n	8001768 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d102      	bne.n	8001768 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2208      	movs	r2, #8
 8001766:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff ffab 	bl	80016c4 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	771a      	strb	r2, [r3, #28]
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <TIM_Base_SetConfig+0xc0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00b      	beq.n	80017b0 <TIM_Base_SetConfig+0x34>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179e:	d007      	beq.n	80017b0 <TIM_Base_SetConfig+0x34>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a27      	ldr	r2, [pc, #156]	; (8001840 <TIM_Base_SetConfig+0xc4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d003      	beq.n	80017b0 <TIM_Base_SetConfig+0x34>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <TIM_Base_SetConfig+0xc8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d108      	bne.n	80017c2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <TIM_Base_SetConfig+0xc0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00b      	beq.n	80017e2 <TIM_Base_SetConfig+0x66>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d007      	beq.n	80017e2 <TIM_Base_SetConfig+0x66>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <TIM_Base_SetConfig+0xc4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d003      	beq.n	80017e2 <TIM_Base_SetConfig+0x66>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <TIM_Base_SetConfig+0xc8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d108      	bne.n	80017f4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017fa:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <TIM_Base_SetConfig+0xc0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d103      	bne.n	800182c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	615a      	str	r2, [r3, #20]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40000400 	.word	0x40000400
 8001844:	40000800 	.word	0x40000800

08001848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	f023 0201 	bic.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f023 0302 	bic.w	r3, r3, #2
 800189c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <TIM_OC1_SetConfig+0xd4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10c      	bne.n	80018ca <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f023 0308 	bic.w	r3, r3, #8
 80018b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <TIM_OC1_SetConfig+0xd4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d111      	bne.n	80018f6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	621a      	str	r2, [r3, #32]
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00

08001920 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	f023 0210 	bic.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800195a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0320 	bic.w	r3, r3, #32
 8001976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <TIM_OC2_SetConfig+0xdc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10d      	bne.n	80019a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019a6:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a14      	ldr	r2, [pc, #80]	; (80019fc <TIM_OC2_SetConfig+0xdc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d113      	bne.n	80019d8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	621a      	str	r2, [r3, #32]
}
 80019f2:	bf00      	nop
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40012c00 	.word	0x40012c00

08001a00 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <TIM_OC3_SetConfig+0xdc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10d      	bne.n	8001a86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a84:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <TIM_OC3_SetConfig+0xdc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d113      	bne.n	8001ab6 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	621a      	str	r2, [r3, #32]
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40012c00 	.word	0x40012c00

08001ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b1a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b22:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b36:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	031b      	lsls	r3, r3, #12
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <TIM_OC4_SetConfig+0xa4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d109      	bne.n	8001b60 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	019b      	lsls	r3, r3, #6
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	621a      	str	r2, [r3, #32]
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40012c00 	.word	0x40012c00

08001b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	621a      	str	r2, [r3, #32]
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e044      	b.n	8001c72 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e032      	b.n	8001cfa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cb2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <neopixel_init>:
uint8_t *led_buf;
#endif
extern TIM_HandleTypeDef htim1;

void neopixel_init(int cnt)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	led_buf = (uint8_t*)malloc(sizeof(uint8_t)*24*cnt+70);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	3346      	adds	r3, #70	; 0x46
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fbb1 	bl	8002480 <malloc>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <neopixel_init+0x2c>)
 8001d24:	601a      	str	r2, [r3, #0]
//	for(int i = 0; i < 70; i++)
//		led_buf[i] = 40;

}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000120 	.word	0x20000120

08001d34 <neopixel_begin>:
void neopixel_pause(void)
{
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
}
void neopixel_begin(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)led_buf, sizeof(led_buf));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <neopixel_begin+0x18>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <neopixel_begin+0x1c>)
 8001d42:	f7ff fb23 	bl	800138c <HAL_TIM_PWM_Start_DMA>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000120 	.word	0x20000120
 8001d50:	200000e0 	.word	0x200000e0

08001d54 <neopixel_SetColor>:
void neopixel_SetColor(uint32_t cnt, uint8_t red, uint8_t green, uint8_t blue, uint8_t white)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	70fb      	strb	r3, [r7, #3]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70bb      	strb	r3, [r7, #2]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	707b      	strb	r3, [r7, #1]
	uint32_t cnt_ = cnt - 1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 8; i ++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e068      	b.n	8001e4c <neopixel_SetColor+0xf8>
		if(white >> i & 0x01)
			led_buf[index_white] = BIT_HIGH;
		else
			led_buf[index_white] = BIT_LOW;
#else
		uint16_t index_green 		= 69+(24*cnt_)+8-i;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	0052      	lsls	r2, r2, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	334d      	adds	r3, #77	; 0x4d
 8001d92:	81fb      	strh	r3, [r7, #14]
		uint16_t index_red 			= 69+(24*cnt_)+16-i;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3355      	adds	r3, #85	; 0x55
 8001dac:	81bb      	strh	r3, [r7, #12]
		uint16_t index_blue 		= 69+(24*cnt_)+24-i;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	0052      	lsls	r2, r2, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	335d      	adds	r3, #93	; 0x5d
 8001dc6:	817b      	strh	r3, [r7, #10]
		if(green >> i & 0x01)
 8001dc8:	78ba      	ldrb	r2, [r7, #2]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa42 f303 	asr.w	r3, r2, r3
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <neopixel_SetColor+0x92>
			led_buf[index_red] = BIT_HIGH;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <neopixel_SetColor+0x108>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	89bb      	ldrh	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	2231      	movs	r2, #49	; 0x31
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e005      	b.n	8001df2 <neopixel_SetColor+0x9e>
		else
			led_buf[index_red] = BIT_LOW;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <neopixel_SetColor+0x108>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	2219      	movs	r2, #25
 8001df0:	701a      	strb	r2, [r3, #0]
		if(red >> i & 0x01)
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa42 f303 	asr.w	r3, r2, r3
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <neopixel_SetColor+0xbc>
			led_buf[index_green] = BIT_HIGH;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <neopixel_SetColor+0x108>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	4413      	add	r3, r2
 8001e0a:	2231      	movs	r2, #49	; 0x31
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e005      	b.n	8001e1c <neopixel_SetColor+0xc8>
		else
			led_buf[index_green] = BIT_LOW;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <neopixel_SetColor+0x108>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	4413      	add	r3, r2
 8001e18:	2219      	movs	r2, #25
 8001e1a:	701a      	strb	r2, [r3, #0]
		if(blue >> i & 0x01)
 8001e1c:	787a      	ldrb	r2, [r7, #1]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa42 f303 	asr.w	r3, r2, r3
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <neopixel_SetColor+0xe6>
			led_buf[index_blue] = BIT_HIGH;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <neopixel_SetColor+0x108>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	897b      	ldrh	r3, [r7, #10]
 8001e32:	4413      	add	r3, r2
 8001e34:	2231      	movs	r2, #49	; 0x31
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e005      	b.n	8001e46 <neopixel_SetColor+0xf2>
		else
			led_buf[index_blue] = BIT_LOW;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <neopixel_SetColor+0x108>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	897b      	ldrh	r3, [r7, #10]
 8001e40:	4413      	add	r3, r2
 8001e42:	2219      	movs	r2, #25
 8001e44:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i ++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b07      	cmp	r3, #7
 8001e50:	dd93      	ble.n	8001d7a <neopixel_SetColor+0x26>
#endif

	}
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000120 	.word	0x20000120

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e66:	f7fe f971 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6a:	f000 f83b 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6e:	f000 f923 	bl	80020b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e72:	f000 f903 	bl	800207c <MX_DMA_Init>
  MX_TIM1_Init();
 8001e76:	f000 f87b 	bl	8001f70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  neopixel_init(1);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff ff42 	bl	8001d04 <neopixel_init>
  neopixel_SetColor(1, 255, 255, 255, 0);
 8001e80:	2300      	movs	r3, #0
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	23ff      	movs	r3, #255	; 0xff
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	21ff      	movs	r1, #255	; 0xff
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff ff62 	bl	8001d54 <neopixel_SetColor>
  neopixel_SetColor(1, 255, 255, 0, 0);
 8001e90:	2300      	movs	r3, #0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	22ff      	movs	r2, #255	; 0xff
 8001e98:	21ff      	movs	r1, #255	; 0xff
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff ff5a 	bl	8001d54 <neopixel_SetColor>
  uint8_t i = 100;
 8001ea0:	2364      	movs	r3, #100	; 0x64
 8001ea2:	71fb      	strb	r3, [r7, #7]
  uint8_t j = 200;
 8001ea4:	23c8      	movs	r3, #200	; 0xc8
 8001ea6:	71bb      	strb	r3, [r7, #6]
  uint8_t k = 50;
 8001ea8:	2332      	movs	r3, #50	; 0x32
 8001eaa:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <main+0x80>)
 8001eb2:	f7fe fe3d 	bl	8000b30 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eba:	f7fe f9a9 	bl	8000210 <HAL_Delay>
	  neopixel_SetColor(1, i++, j++, k++, 0);
 8001ebe:	79f9      	ldrb	r1, [r7, #7]
 8001ec0:	1c4b      	adds	r3, r1, #1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	79ba      	ldrb	r2, [r7, #6]
 8001ec6:	1c53      	adds	r3, r2, #1
 8001ec8:	71bb      	strb	r3, [r7, #6]
 8001eca:	797b      	ldrb	r3, [r7, #5]
 8001ecc:	1c58      	adds	r0, r3, #1
 8001ece:	7178      	strb	r0, [r7, #5]
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	9000      	str	r0, [sp, #0]
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7ff ff3d 	bl	8001d54 <neopixel_SetColor>
	  neopixel_begin();
 8001eda:	f7ff ff2b 	bl	8001d34 <neopixel_begin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001ede:	e7e5      	b.n	8001eac <main+0x4c>
 8001ee0:	40010c00 	.word	0x40010c00

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b090      	sub	sp, #64	; 0x40
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0318 	add.w	r3, r7, #24
 8001eee:	2228      	movs	r2, #40	; 0x28
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 facc 	bl	8002490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f22:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fe11 	bl	8000b54 <HAL_RCC_OscConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f38:	f000 f90a 	bl	8002150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f40:	2302      	movs	r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2102      	movs	r1, #2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f860 	bl	800101c <HAL_RCC_ClockConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f62:	f000 f8f5 	bl	8002150 <Error_Handler>
  }
}
 8001f66:	bf00      	nop
 8001f68:	3740      	adds	r7, #64	; 0x40
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b090      	sub	sp, #64	; 0x40
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	615a      	str	r2, [r3, #20]
 8001f92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f94:	463b      	mov	r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	615a      	str	r2, [r3, #20]
 8001fa4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fa8:	4a33      	ldr	r2, [pc, #204]	; (8002078 <MX_TIM1_Init+0x108>)
 8001faa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 93;
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fba:	225d      	movs	r2, #93	; 0x5d
 8001fbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fd0:	4828      	ldr	r0, [pc, #160]	; (8002074 <MX_TIM1_Init+0x104>)
 8001fd2:	f7ff f9af 	bl	8001334 <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001fdc:	f000 f8b8 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fec:	4619      	mov	r1, r3
 8001fee:	4821      	ldr	r0, [pc, #132]	; (8002074 <MX_TIM1_Init+0x104>)
 8001ff0:	f7ff fe44 	bl	8001c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001ffa:	f000 f8a9 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffe:	2360      	movs	r3, #96	; 0x60
 8002000:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800200a:	2300      	movs	r3, #0
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	4814      	ldr	r0, [pc, #80]	; (8002074 <MX_TIM1_Init+0x104>)
 8002024:	f7ff fa88 	bl	8001538 <HAL_TIM_PWM_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800202e:	f000 f88f 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM1_Init+0x104>)
 8002056:	f7ff fdb9 	bl	8001bcc <HAL_TIMEx_ConfigBreakDeadTime>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002060:	f000 f876 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM1_Init+0x104>)
 8002066:	f000 f8f3 	bl	8002250 <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3740      	adds	r7, #64	; 0x40
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200000e0 	.word	0x200000e0
 8002078:	40012c00 	.word	0x40012c00

0800207c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_DMA_Init+0x38>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <MX_DMA_Init+0x38>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_DMA_Init+0x38>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	200c      	movs	r0, #12
 80020a0:	f7fe f9ab 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020a4:	200c      	movs	r0, #12
 80020a6:	f7fe f9c4 	bl	8000432 <HAL_NVIC_EnableIRQ>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 0310 	add.w	r3, r7, #16
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_GPIO_Init+0x90>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <MX_GPIO_Init+0x90>)
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <MX_GPIO_Init+0x90>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <MX_GPIO_Init+0x90>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <MX_GPIO_Init+0x90>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_GPIO_Init+0x90>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <MX_GPIO_Init+0x90>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <MX_GPIO_Init+0x90>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_GPIO_Init+0x90>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211a:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_GPIO_Init+0x94>)
 800211c:	f7fe fcf0 	bl	8000b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2302      	movs	r3, #2
 8002130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4619      	mov	r1, r3
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_GPIO_Init+0x94>)
 800213a:	f7fe fb83 	bl	8000844 <HAL_GPIO_Init>

}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40010c00 	.word	0x40010c00

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_MspInit+0x5c>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_MspInit+0x5c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6193      	str	r3, [r2, #24]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_MspInit+0x5c>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x5c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_MspInit+0x5c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_MspInit+0x5c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_MspInit+0x60>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_MspInit+0x60>)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000

080021c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_TIM_PWM_MspInit+0x80>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d132      	bne.n	8002238 <HAL_TIM_PWM_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_TIM_PWM_MspInit+0x84>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_TIM_PWM_MspInit+0x84>)
 80021d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_TIM_PWM_MspInit+0x84>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_TIM_PWM_MspInit+0x8c>)
 80021ee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 80021f2:	2210      	movs	r2, #16
 80021f4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 8002204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002208:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 8002212:	2220      	movs	r2, #32
 8002214:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 800221e:	f7fe f923 	bl	8000468 <HAL_DMA_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 8002228:	f7ff ff92 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <HAL_TIM_PWM_MspInit+0x88>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40021000 	.word	0x40021000
 8002248:	2000009c 	.word	0x2000009c
 800224c:	4002001c 	.word	0x4002001c

08002250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_TIM_MspPostInit+0x5c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d118      	bne.n	80022a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_TIM_MspPostInit+0x60>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_TIM_MspPostInit+0x60>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_TIM_MspPostInit+0x60>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2302      	movs	r3, #2
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4619      	mov	r1, r3
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_TIM_MspPostInit+0x64>)
 800229e:	f7fe fad1 	bl	8000844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010800 	.word	0x40010800

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <HardFault_Handler+0x4>

080022ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <MemManage_Handler+0x4>

080022d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <BusFault_Handler+0x4>

080022d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <UsageFault_Handler+0x4>

080022dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f7fd ff68 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <DMA1_Channel2_IRQHandler+0x10>)
 8002312:	f7fe f963 	bl	80005dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000009c 	.word	0x2000009c

08002320 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x50>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x16>
		heap_end = &end;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <_sbrk+0x50>)
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <_sbrk+0x54>)
 8002334:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <_sbrk+0x50>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <_sbrk+0x50>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	466a      	mov	r2, sp
 8002346:	4293      	cmp	r3, r2
 8002348:	d907      	bls.n	800235a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800234a:	f000 f86f 	bl	800242c <__errno>
 800234e:	4602      	mov	r2, r0
 8002350:	230c      	movs	r3, #12
 8002352:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	e006      	b.n	8002368 <_sbrk+0x48>
	}

	heap_end += incr;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <_sbrk+0x50>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a03      	ldr	r2, [pc, #12]	; (8002370 <_sbrk+0x50>)
 8002364:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000008c 	.word	0x2000008c
 8002374:	20000128 	.word	0x20000128

08002378 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <SystemInit+0x5c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <SystemInit+0x5c>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <SystemInit+0x5c>)
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4911      	ldr	r1, [pc, #68]	; (80023d4 <SystemInit+0x5c>)
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <SystemInit+0x60>)
 8002390:	4013      	ands	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <SystemInit+0x5c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <SystemInit+0x5c>)
 800239a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <SystemInit+0x5c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SystemInit+0x5c>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <SystemInit+0x5c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <SystemInit+0x5c>)
 80023b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SystemInit+0x5c>)
 80023be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SystemInit+0x64>)
 80023c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	f8ff0000 	.word	0xf8ff0000
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023e2:	e003      	b.n	80023ec <LoopCopyDataInit>

080023e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023ea:	3104      	adds	r1, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023ec:	480a      	ldr	r0, [pc, #40]	; (8002418 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023f4:	d3f6      	bcc.n	80023e4 <CopyDataInit>
  ldr r2, =_sbss
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023f8:	e002      	b.n	8002400 <LoopFillZerobss>

080023fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023fc:	f842 3b04 	str.w	r3, [r2], #4

08002400 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002402:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002404:	d3f9      	bcc.n	80023fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002406:	f7ff ffb7 	bl	8002378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240a:	f000 f815 	bl	8002438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800240e:	f7ff fd27 	bl	8001e60 <main>
  bx lr
 8002412:	4770      	bx	lr
  ldr r3, =_sidata
 8002414:	080025bc 	.word	0x080025bc
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800241c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002420:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002424:	20000128 	.word	0x20000128

08002428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC1_2_IRQHandler>
	...

0800242c <__errno>:
 800242c:	4b01      	ldr	r3, [pc, #4]	; (8002434 <__errno+0x8>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	2000000c 	.word	0x2000000c

08002438 <__libc_init_array>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	2500      	movs	r5, #0
 800243c:	4e0c      	ldr	r6, [pc, #48]	; (8002470 <__libc_init_array+0x38>)
 800243e:	4c0d      	ldr	r4, [pc, #52]	; (8002474 <__libc_init_array+0x3c>)
 8002440:	1ba4      	subs	r4, r4, r6
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	42a5      	cmp	r5, r4
 8002446:	d109      	bne.n	800245c <__libc_init_array+0x24>
 8002448:	f000 f896 	bl	8002578 <_init>
 800244c:	2500      	movs	r5, #0
 800244e:	4e0a      	ldr	r6, [pc, #40]	; (8002478 <__libc_init_array+0x40>)
 8002450:	4c0a      	ldr	r4, [pc, #40]	; (800247c <__libc_init_array+0x44>)
 8002452:	1ba4      	subs	r4, r4, r6
 8002454:	10a4      	asrs	r4, r4, #2
 8002456:	42a5      	cmp	r5, r4
 8002458:	d105      	bne.n	8002466 <__libc_init_array+0x2e>
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002460:	4798      	blx	r3
 8002462:	3501      	adds	r5, #1
 8002464:	e7ee      	b.n	8002444 <__libc_init_array+0xc>
 8002466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800246a:	4798      	blx	r3
 800246c:	3501      	adds	r5, #1
 800246e:	e7f2      	b.n	8002456 <__libc_init_array+0x1e>
 8002470:	080025b4 	.word	0x080025b4
 8002474:	080025b4 	.word	0x080025b4
 8002478:	080025b4 	.word	0x080025b4
 800247c:	080025b8 	.word	0x080025b8

08002480 <malloc>:
 8002480:	4b02      	ldr	r3, [pc, #8]	; (800248c <malloc+0xc>)
 8002482:	4601      	mov	r1, r0
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	f000 b80b 	b.w	80024a0 <_malloc_r>
 800248a:	bf00      	nop
 800248c:	2000000c 	.word	0x2000000c

08002490 <memset>:
 8002490:	4603      	mov	r3, r0
 8002492:	4402      	add	r2, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <memset+0xa>
 8002498:	4770      	bx	lr
 800249a:	f803 1b01 	strb.w	r1, [r3], #1
 800249e:	e7f9      	b.n	8002494 <memset+0x4>

080024a0 <_malloc_r>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	1ccd      	adds	r5, r1, #3
 80024a4:	f025 0503 	bic.w	r5, r5, #3
 80024a8:	3508      	adds	r5, #8
 80024aa:	2d0c      	cmp	r5, #12
 80024ac:	bf38      	it	cc
 80024ae:	250c      	movcc	r5, #12
 80024b0:	2d00      	cmp	r5, #0
 80024b2:	4606      	mov	r6, r0
 80024b4:	db01      	blt.n	80024ba <_malloc_r+0x1a>
 80024b6:	42a9      	cmp	r1, r5
 80024b8:	d903      	bls.n	80024c2 <_malloc_r+0x22>
 80024ba:	230c      	movs	r3, #12
 80024bc:	6033      	str	r3, [r6, #0]
 80024be:	2000      	movs	r0, #0
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	f000 f857 	bl	8002574 <__malloc_lock>
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <_malloc_r+0xac>)
 80024c8:	6814      	ldr	r4, [r2, #0]
 80024ca:	4621      	mov	r1, r4
 80024cc:	b991      	cbnz	r1, 80024f4 <_malloc_r+0x54>
 80024ce:	4c20      	ldr	r4, [pc, #128]	; (8002550 <_malloc_r+0xb0>)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	b91b      	cbnz	r3, 80024dc <_malloc_r+0x3c>
 80024d4:	4630      	mov	r0, r6
 80024d6:	f000 f83d 	bl	8002554 <_sbrk_r>
 80024da:	6020      	str	r0, [r4, #0]
 80024dc:	4629      	mov	r1, r5
 80024de:	4630      	mov	r0, r6
 80024e0:	f000 f838 	bl	8002554 <_sbrk_r>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d124      	bne.n	8002532 <_malloc_r+0x92>
 80024e8:	230c      	movs	r3, #12
 80024ea:	4630      	mov	r0, r6
 80024ec:	6033      	str	r3, [r6, #0]
 80024ee:	f000 f842 	bl	8002576 <__malloc_unlock>
 80024f2:	e7e4      	b.n	80024be <_malloc_r+0x1e>
 80024f4:	680b      	ldr	r3, [r1, #0]
 80024f6:	1b5b      	subs	r3, r3, r5
 80024f8:	d418      	bmi.n	800252c <_malloc_r+0x8c>
 80024fa:	2b0b      	cmp	r3, #11
 80024fc:	d90f      	bls.n	800251e <_malloc_r+0x7e>
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	18cc      	adds	r4, r1, r3
 8002502:	50cd      	str	r5, [r1, r3]
 8002504:	4630      	mov	r0, r6
 8002506:	f000 f836 	bl	8002576 <__malloc_unlock>
 800250a:	f104 000b 	add.w	r0, r4, #11
 800250e:	1d23      	adds	r3, r4, #4
 8002510:	f020 0007 	bic.w	r0, r0, #7
 8002514:	1ac3      	subs	r3, r0, r3
 8002516:	d0d3      	beq.n	80024c0 <_malloc_r+0x20>
 8002518:	425a      	negs	r2, r3
 800251a:	50e2      	str	r2, [r4, r3]
 800251c:	e7d0      	b.n	80024c0 <_malloc_r+0x20>
 800251e:	684b      	ldr	r3, [r1, #4]
 8002520:	428c      	cmp	r4, r1
 8002522:	bf16      	itet	ne
 8002524:	6063      	strne	r3, [r4, #4]
 8002526:	6013      	streq	r3, [r2, #0]
 8002528:	460c      	movne	r4, r1
 800252a:	e7eb      	b.n	8002504 <_malloc_r+0x64>
 800252c:	460c      	mov	r4, r1
 800252e:	6849      	ldr	r1, [r1, #4]
 8002530:	e7cc      	b.n	80024cc <_malloc_r+0x2c>
 8002532:	1cc4      	adds	r4, r0, #3
 8002534:	f024 0403 	bic.w	r4, r4, #3
 8002538:	42a0      	cmp	r0, r4
 800253a:	d005      	beq.n	8002548 <_malloc_r+0xa8>
 800253c:	1a21      	subs	r1, r4, r0
 800253e:	4630      	mov	r0, r6
 8002540:	f000 f808 	bl	8002554 <_sbrk_r>
 8002544:	3001      	adds	r0, #1
 8002546:	d0cf      	beq.n	80024e8 <_malloc_r+0x48>
 8002548:	6025      	str	r5, [r4, #0]
 800254a:	e7db      	b.n	8002504 <_malloc_r+0x64>
 800254c:	20000090 	.word	0x20000090
 8002550:	20000094 	.word	0x20000094

08002554 <_sbrk_r>:
 8002554:	b538      	push	{r3, r4, r5, lr}
 8002556:	2300      	movs	r3, #0
 8002558:	4c05      	ldr	r4, [pc, #20]	; (8002570 <_sbrk_r+0x1c>)
 800255a:	4605      	mov	r5, r0
 800255c:	4608      	mov	r0, r1
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	f7ff fede 	bl	8002320 <_sbrk>
 8002564:	1c43      	adds	r3, r0, #1
 8002566:	d102      	bne.n	800256e <_sbrk_r+0x1a>
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	b103      	cbz	r3, 800256e <_sbrk_r+0x1a>
 800256c:	602b      	str	r3, [r5, #0]
 800256e:	bd38      	pop	{r3, r4, r5, pc}
 8002570:	20000124 	.word	0x20000124

08002574 <__malloc_lock>:
 8002574:	4770      	bx	lr

08002576 <__malloc_unlock>:
 8002576:	4770      	bx	lr

08002578 <_init>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr

08002584 <_fini>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr
