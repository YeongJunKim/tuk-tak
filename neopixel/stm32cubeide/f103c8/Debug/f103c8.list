
f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003108  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003240  08003240  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003240  08003240  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003240  08003240  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  2000000c  08003254  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  08003254  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106e4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020c4  00000000  00000000  00030719  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  000327e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00033350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001596f  00000000  00000000  00033de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097f2  00000000  00000000  00049757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007215d  00000000  00000000  00052f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c50a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f44  00000000  00000000  000c5124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031fc 	.word	0x080031fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031fc 	.word	0x080031fc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fd78 	bl	8002c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200019dc 	.word	0x200019dc

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200019dc 	.word	0x200019dc

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d101      	bne.n	800043a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	e043      	b.n	80004c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_DMA_Init+0xa8>)
 8000442:	4413      	add	r3, r2
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <HAL_DMA_Init+0xac>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	009a      	lsls	r2, r3, #2
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <HAL_DMA_Init+0xb0>)
 8000456:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2202      	movs	r2, #2
 800045c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800046e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800047c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2200      	movs	r2, #0
 80004ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	bffdfff8 	.word	0xbffdfff8
 80004d0:	cccccccd 	.word	0xcccccccd
 80004d4:	40020000 	.word	0x40020000

080004d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d101      	bne.n	80004f8 <HAL_DMA_Start_IT+0x20>
 80004f4:	2302      	movs	r3, #2
 80004f6:	e04a      	b.n	800058e <HAL_DMA_Start_IT+0xb6>
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2201      	movs	r2, #1
 80004fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000506:	2b01      	cmp	r3, #1
 8000508:	d13a      	bne.n	8000580 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2202      	movs	r2, #2
 800050e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2200      	movs	r2, #0
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f022 0201 	bic.w	r2, r2, #1
 8000526:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f000 f9ae 	bl	8000890 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000538:	2b00      	cmp	r3, #0
 800053a:	d008      	beq.n	800054e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f042 020e 	orr.w	r2, r2, #14
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	e00f      	b.n	800056e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f022 0204 	bic.w	r2, r2, #4
 800055c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 020a 	orr.w	r2, r2, #10
 800056c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f042 0201 	orr.w	r2, r2, #1
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	e005      	b.n	800058c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000588:	2302      	movs	r3, #2
 800058a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800058c:	7dfb      	ldrb	r3, [r7, #23]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d005      	beq.n	80005ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2204      	movs	r2, #4
 80005b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e051      	b.n	800065e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f022 020e 	bic.w	r2, r2, #14
 80005c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f022 0201 	bic.w	r2, r2, #1
 80005d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a22      	ldr	r2, [pc, #136]	; (8000668 <HAL_DMA_Abort_IT+0xd0>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d029      	beq.n	8000638 <HAL_DMA_Abort_IT+0xa0>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <HAL_DMA_Abort_IT+0xd4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d022      	beq.n	8000634 <HAL_DMA_Abort_IT+0x9c>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <HAL_DMA_Abort_IT+0xd8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d01a      	beq.n	800062e <HAL_DMA_Abort_IT+0x96>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_DMA_Abort_IT+0xdc>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d012      	beq.n	8000628 <HAL_DMA_Abort_IT+0x90>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <HAL_DMA_Abort_IT+0xe0>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d00a      	beq.n	8000622 <HAL_DMA_Abort_IT+0x8a>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1a      	ldr	r2, [pc, #104]	; (800067c <HAL_DMA_Abort_IT+0xe4>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d102      	bne.n	800061c <HAL_DMA_Abort_IT+0x84>
 8000616:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800061a:	e00e      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 800061c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000620:	e00b      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	e008      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	e005      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	e002      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000634:	2310      	movs	r3, #16
 8000636:	e000      	b.n	800063a <HAL_DMA_Abort_IT+0xa2>
 8000638:	2301      	movs	r3, #1
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <HAL_DMA_Abort_IT+0xe8>)
 800063c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	4798      	blx	r3
    } 
  }
  return status;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020008 	.word	0x40020008
 800066c:	4002001c 	.word	0x4002001c
 8000670:	40020030 	.word	0x40020030
 8000674:	40020044 	.word	0x40020044
 8000678:	40020058 	.word	0x40020058
 800067c:	4002006c 	.word	0x4002006c
 8000680:	40020000 	.word	0x40020000

08000684 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	2204      	movs	r2, #4
 80006a2:	409a      	lsls	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d04f      	beq.n	800074c <HAL_DMA_IRQHandler+0xc8>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d04a      	beq.n	800074c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d107      	bne.n	80006d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 0204 	bic.w	r2, r2, #4
 80006d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a66      	ldr	r2, [pc, #408]	; (8000874 <HAL_DMA_IRQHandler+0x1f0>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d029      	beq.n	8000732 <HAL_DMA_IRQHandler+0xae>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a65      	ldr	r2, [pc, #404]	; (8000878 <HAL_DMA_IRQHandler+0x1f4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d022      	beq.n	800072e <HAL_DMA_IRQHandler+0xaa>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a63      	ldr	r2, [pc, #396]	; (800087c <HAL_DMA_IRQHandler+0x1f8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d01a      	beq.n	8000728 <HAL_DMA_IRQHandler+0xa4>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a62      	ldr	r2, [pc, #392]	; (8000880 <HAL_DMA_IRQHandler+0x1fc>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d012      	beq.n	8000722 <HAL_DMA_IRQHandler+0x9e>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a60      	ldr	r2, [pc, #384]	; (8000884 <HAL_DMA_IRQHandler+0x200>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d00a      	beq.n	800071c <HAL_DMA_IRQHandler+0x98>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a5f      	ldr	r2, [pc, #380]	; (8000888 <HAL_DMA_IRQHandler+0x204>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d102      	bne.n	8000716 <HAL_DMA_IRQHandler+0x92>
 8000710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000714:	e00e      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000716:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800071a:	e00b      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 800071c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000720:	e008      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000726:	e005      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	e002      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	e000      	b.n	8000734 <HAL_DMA_IRQHandler+0xb0>
 8000732:	2304      	movs	r3, #4
 8000734:	4a55      	ldr	r2, [pc, #340]	; (800088c <HAL_DMA_IRQHandler+0x208>)
 8000736:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 8094 	beq.w	800086a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800074a:	e08e      	b.n	800086a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	2202      	movs	r2, #2
 8000752:	409a      	lsls	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4013      	ands	r3, r2
 8000758:	2b00      	cmp	r3, #0
 800075a:	d056      	beq.n	800080a <HAL_DMA_IRQHandler+0x186>
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d051      	beq.n	800080a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10b      	bne.n	800078c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f022 020a 	bic.w	r2, r2, #10
 8000782:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a38      	ldr	r2, [pc, #224]	; (8000874 <HAL_DMA_IRQHandler+0x1f0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d029      	beq.n	80007ea <HAL_DMA_IRQHandler+0x166>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a37      	ldr	r2, [pc, #220]	; (8000878 <HAL_DMA_IRQHandler+0x1f4>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d022      	beq.n	80007e6 <HAL_DMA_IRQHandler+0x162>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a35      	ldr	r2, [pc, #212]	; (800087c <HAL_DMA_IRQHandler+0x1f8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d01a      	beq.n	80007e0 <HAL_DMA_IRQHandler+0x15c>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <HAL_DMA_IRQHandler+0x1fc>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d012      	beq.n	80007da <HAL_DMA_IRQHandler+0x156>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a32      	ldr	r2, [pc, #200]	; (8000884 <HAL_DMA_IRQHandler+0x200>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d00a      	beq.n	80007d4 <HAL_DMA_IRQHandler+0x150>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <HAL_DMA_IRQHandler+0x204>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d102      	bne.n	80007ce <HAL_DMA_IRQHandler+0x14a>
 80007c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007cc:	e00e      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007d2:	e00b      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d8:	e008      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	e005      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e4:	e002      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007e6:	2320      	movs	r3, #32
 80007e8:	e000      	b.n	80007ec <HAL_DMA_IRQHandler+0x168>
 80007ea:	2302      	movs	r3, #2
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <HAL_DMA_IRQHandler+0x208>)
 80007ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d034      	beq.n	800086a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000808:	e02f      	b.n	800086a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	2208      	movs	r2, #8
 8000810:	409a      	lsls	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4013      	ands	r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d028      	beq.n	800086c <HAL_DMA_IRQHandler+0x1e8>
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	2b00      	cmp	r3, #0
 8000822:	d023      	beq.n	800086c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f022 020e 	bic.w	r2, r2, #14
 8000832:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800083c:	2101      	movs	r1, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	2b00      	cmp	r3, #0
 8000860:	d004      	beq.n	800086c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	4798      	blx	r3
    }
  }
  return;
 800086a:	bf00      	nop
 800086c:	bf00      	nop
}
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40020008 	.word	0x40020008
 8000878:	4002001c 	.word	0x4002001c
 800087c:	40020030 	.word	0x40020030
 8000880:	40020044 	.word	0x40020044
 8000884:	40020058 	.word	0x40020058
 8000888:	4002006c 	.word	0x4002006c
 800088c:	40020000 	.word	0x40020000

08000890 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d108      	bne.n	80008d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80008ce:	e007      	b.n	80008e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	60da      	str	r2, [r3, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
	...

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b08b      	sub	sp, #44	; 0x2c
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	e127      	b.n	8000b60 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8116 	bne.w	8000b5a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b12      	cmp	r3, #18
 8000934:	d034      	beq.n	80009a0 <HAL_GPIO_Init+0xb4>
 8000936:	2b12      	cmp	r3, #18
 8000938:	d80d      	bhi.n	8000956 <HAL_GPIO_Init+0x6a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d02b      	beq.n	8000996 <HAL_GPIO_Init+0xaa>
 800093e:	2b02      	cmp	r3, #2
 8000940:	d804      	bhi.n	800094c <HAL_GPIO_Init+0x60>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d01c      	beq.n	8000984 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800094a:	e048      	b.n	80009de <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800094c:	2b03      	cmp	r3, #3
 800094e:	d043      	beq.n	80009d8 <HAL_GPIO_Init+0xec>
 8000950:	2b11      	cmp	r3, #17
 8000952:	d01b      	beq.n	800098c <HAL_GPIO_Init+0xa0>
          break;
 8000954:	e043      	b.n	80009de <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000956:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x288>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d026      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 800095c:	4a85      	ldr	r2, [pc, #532]	; (8000b74 <HAL_GPIO_Init+0x288>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d806      	bhi.n	8000970 <HAL_GPIO_Init+0x84>
 8000962:	4a85      	ldr	r2, [pc, #532]	; (8000b78 <HAL_GPIO_Init+0x28c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d020      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 8000968:	4a84      	ldr	r2, [pc, #528]	; (8000b7c <HAL_GPIO_Init+0x290>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d01d      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
          break;
 800096e:	e036      	b.n	80009de <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000970:	4a83      	ldr	r2, [pc, #524]	; (8000b80 <HAL_GPIO_Init+0x294>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d019      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 8000976:	4a83      	ldr	r2, [pc, #524]	; (8000b84 <HAL_GPIO_Init+0x298>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d016      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
 800097c:	4a82      	ldr	r2, [pc, #520]	; (8000b88 <HAL_GPIO_Init+0x29c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0xbe>
          break;
 8000982:	e02c      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e028      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e023      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	3308      	adds	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e01e      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	330c      	adds	r3, #12
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e019      	b.n	80009de <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009b2:	2304      	movs	r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e012      	b.n	80009de <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	611a      	str	r2, [r3, #16]
          break;
 80009ca:	e008      	b.n	80009de <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	615a      	str	r2, [r3, #20]
          break;
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	d801      	bhi.n	80009e8 <HAL_GPIO_Init+0xfc>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	e001      	b.n	80009ec <HAL_GPIO_Init+0x100>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2bff      	cmp	r3, #255	; 0xff
 80009f2:	d802      	bhi.n	80009fa <HAL_GPIO_Init+0x10e>
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x114>
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	3b08      	subs	r3, #8
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	210f      	movs	r1, #15
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	401a      	ands	r2, r3
 8000a12:	6a39      	ldr	r1, [r7, #32]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 8096 	beq.w	8000b5a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b57      	ldr	r3, [pc, #348]	; (8000b8c <HAL_GPIO_Init+0x2a0>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a56      	ldr	r2, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x2a0>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b54      	ldr	r3, [pc, #336]	; (8000b8c <HAL_GPIO_Init+0x2a0>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000a46:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <HAL_GPIO_Init+0x2a4>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	4013      	ands	r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x1ae>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <HAL_GPIO_Init+0x2ac>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x1aa>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a47      	ldr	r2, [pc, #284]	; (8000b9c <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x1a6>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <HAL_GPIO_Init+0x2b4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x1a2>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x1b0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000aac:	4938      	ldr	r1, [pc, #224]	; (8000b90 <HAL_GPIO_Init+0x2a4>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4936      	ldr	r1, [pc, #216]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad4:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4931      	ldr	r1, [pc, #196]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	492c      	ldr	r1, [pc, #176]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	604b      	str	r3, [r1, #4]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4927      	ldr	r1, [pc, #156]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	4922      	ldr	r1, [pc, #136]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	608b      	str	r3, [r1, #8]
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	491d      	ldr	r1, [pc, #116]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	4918      	ldr	r1, [pc, #96]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60cb      	str	r3, [r1, #12]
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4913      	ldr	r1, [pc, #76]	; (8000ba4 <HAL_GPIO_Init+0x2b8>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	f67f aed4 	bls.w	8000910 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	405a      	eors	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60da      	str	r2, [r3, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 8087 	beq.w	8000d24 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c16:	4b92      	ldr	r3, [pc, #584]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d00c      	beq.n	8000c3c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c22:	4b8f      	ldr	r3, [pc, #572]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d112      	bne.n	8000c54 <HAL_RCC_OscConfig+0x58>
 8000c2e:	4b8c      	ldr	r3, [pc, #560]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d10b      	bne.n	8000c54 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3c:	4b88      	ldr	r3, [pc, #544]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d06c      	beq.n	8000d22 <HAL_RCC_OscConfig+0x126>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d168      	bne.n	8000d22 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e22d      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5c:	d106      	bne.n	8000c6c <HAL_RCC_OscConfig+0x70>
 8000c5e:	4b80      	ldr	r3, [pc, #512]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a7f      	ldr	r2, [pc, #508]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e02e      	b.n	8000cca <HAL_RCC_OscConfig+0xce>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10c      	bne.n	8000c8e <HAL_RCC_OscConfig+0x92>
 8000c74:	4b7a      	ldr	r3, [pc, #488]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a79      	ldr	r2, [pc, #484]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b77      	ldr	r3, [pc, #476]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a76      	ldr	r2, [pc, #472]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e01d      	b.n	8000cca <HAL_RCC_OscConfig+0xce>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c96:	d10c      	bne.n	8000cb2 <HAL_RCC_OscConfig+0xb6>
 8000c98:	4b71      	ldr	r3, [pc, #452]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a70      	ldr	r2, [pc, #448]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b6e      	ldr	r3, [pc, #440]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a6d      	ldr	r2, [pc, #436]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e00b      	b.n	8000cca <HAL_RCC_OscConfig+0xce>
 8000cb2:	4b6b      	ldr	r3, [pc, #428]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a6a      	ldr	r2, [pc, #424]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b68      	ldr	r3, [pc, #416]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a67      	ldr	r2, [pc, #412]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d013      	beq.n	8000cfa <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fa93 	bl	80001fc <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cda:	f7ff fa8f 	bl	80001fc <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b64      	cmp	r3, #100	; 0x64
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e1e1      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cec:	4b5c      	ldr	r3, [pc, #368]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0xde>
 8000cf8:	e014      	b.n	8000d24 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fa7f 	bl	80001fc <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fa7b 	bl	80001fc <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b64      	cmp	r3, #100	; 0x64
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e1cd      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d14:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f0      	bne.n	8000d02 <HAL_RCC_OscConfig+0x106>
 8000d20:	e000      	b.n	8000d24 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d063      	beq.n	8000df8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00b      	beq.n	8000d54 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d3c:	4b48      	ldr	r3, [pc, #288]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d11c      	bne.n	8000d82 <HAL_RCC_OscConfig+0x186>
 8000d48:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d116      	bne.n	8000d82 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d54:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_RCC_OscConfig+0x170>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d001      	beq.n	8000d6c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e1a1      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4939      	ldr	r1, [pc, #228]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d80:	e03a      	b.n	8000df8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d020      	beq.n	8000dcc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <HAL_RCC_OscConfig+0x268>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fa34 	bl	80001fc <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fa30 	bl	80001fc <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e182      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4926      	ldr	r1, [pc, #152]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
 8000dca:	e015      	b.n	8000df8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_RCC_OscConfig+0x268>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fa13 	bl	80001fc <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fa0f 	bl	80001fc <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e161      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f0      	bne.n	8000dda <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d039      	beq.n	8000e78 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d019      	beq.n	8000e40 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e12:	f7ff f9f3 	bl	80001fc <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1a:	f7ff f9ef 	bl	80001fc <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e141      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_RCC_OscConfig+0x264>)
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f0      	beq.n	8000e1a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fae3 	bl	8001404 <RCC_Delay>
 8000e3e:	e01b      	b.n	8000e78 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e46:	f7ff f9d9 	bl	80001fc <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	e00e      	b.n	8000e6c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e4e:	f7ff f9d5 	bl	80001fc <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d907      	bls.n	8000e6c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e127      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
 8000e60:	40021000 	.word	0x40021000
 8000e64:	42420000 	.word	0x42420000
 8000e68:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6c:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ea      	bne.n	8000e4e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80a6 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8a:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10d      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a87      	ldr	r2, [pc, #540]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	4b82      	ldr	r3, [pc, #520]	; (80010bc <HAL_RCC_OscConfig+0x4c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d118      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <HAL_RCC_OscConfig+0x4c0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a7e      	ldr	r2, [pc, #504]	; (80010bc <HAL_RCC_OscConfig+0x4c0>)
 8000ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eca:	f7ff f997 	bl	80001fc <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed2:	f7ff f993 	bl	80001fc <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e0e5      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	4b75      	ldr	r3, [pc, #468]	; (80010bc <HAL_RCC_OscConfig+0x4c0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f0      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x30a>
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a6e      	ldr	r2, [pc, #440]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6213      	str	r3, [r2, #32]
 8000f04:	e02d      	b.n	8000f62 <HAL_RCC_OscConfig+0x366>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x32c>
 8000f0e:	4b6a      	ldr	r3, [pc, #424]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a69      	ldr	r2, [pc, #420]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a66      	ldr	r2, [pc, #408]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6213      	str	r3, [r2, #32]
 8000f26:	e01c      	b.n	8000f62 <HAL_RCC_OscConfig+0x366>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d10c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x34e>
 8000f30:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a60      	ldr	r2, [pc, #384]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6213      	str	r3, [r2, #32]
 8000f3c:	4b5e      	ldr	r3, [pc, #376]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a5d      	ldr	r2, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6213      	str	r3, [r2, #32]
 8000f48:	e00b      	b.n	8000f62 <HAL_RCC_OscConfig+0x366>
 8000f4a:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6213      	str	r3, [r2, #32]
 8000f56:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4a57      	ldr	r2, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f5c:	f023 0304 	bic.w	r3, r3, #4
 8000f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d015      	beq.n	8000f96 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff f947 	bl	80001fc <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f72:	f7ff f943 	bl	80001fc <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e093      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f88:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0ee      	beq.n	8000f72 <HAL_RCC_OscConfig+0x376>
 8000f94:	e014      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f96:	f7ff f931 	bl	80001fc <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9c:	e00a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9e:	f7ff f92d 	bl	80001fc <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e07d      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb4:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1ee      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d105      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a3b      	ldr	r2, [pc, #236]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d069      	beq.n	80010ae <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d061      	beq.n	80010aa <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d146      	bne.n	800107c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff f902 	bl	80001fc <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffc:	f7ff f8fe 	bl	80001fc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e050      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001022:	d108      	bne.n	8001036 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4921      	ldr	r1, [pc, #132]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8001032:	4313      	orrs	r3, r2
 8001034:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a19      	ldr	r1, [r3, #32]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	430b      	orrs	r3, r1
 8001048:	491b      	ldr	r1, [pc, #108]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff f8d2 	bl	80001fc <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff f8ce 	bl	80001fc <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e020      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0x460>
 800107a:	e018      	b.n	80010ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff f8bb 	bl	80001fc <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108a:	f7ff f8b7 	bl	80001fc <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e009      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_RCC_OscConfig+0x4bc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f0      	bne.n	800108a <HAL_RCC_OscConfig+0x48e>
 80010a8:	e001      	b.n	80010ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40007000 	.word	0x40007000
 80010c0:	42420060 	.word	0x42420060

080010c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010d2:	4b7e      	ldr	r3, [pc, #504]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d910      	bls.n	8001102 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 0207 	bic.w	r2, r3, #7
 80010e8:	4978      	ldr	r1, [pc, #480]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d001      	beq.n	8001102 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0e0      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d020      	beq.n	8001150 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800111a:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4a6c      	ldr	r2, [pc, #432]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001120:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001124:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a66      	ldr	r2, [pc, #408]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001138:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113e:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4961      	ldr	r1, [pc, #388]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d06a      	beq.n	8001232 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d107      	bne.n	8001174 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001164:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d115      	bne.n	800119c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0a7      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d107      	bne.n	800118c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117c:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d109      	bne.n	800119c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e09b      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e093      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 0203 	bic.w	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4949      	ldr	r1, [pc, #292]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ae:	f7ff f825 	bl	80001fc <HAL_GetTick>
 80011b2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d112      	bne.n	80011e2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011be:	f7ff f81d 	bl	80001fc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e077      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d1ee      	bne.n	80011be <HAL_RCC_ClockConfig+0xfa>
 80011e0:	e027      	b.n	8001232 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d11d      	bne.n	8001226 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ec:	f7ff f806 	bl	80001fc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e060      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b08      	cmp	r3, #8
 800120c:	d1ee      	bne.n	80011ec <HAL_RCC_ClockConfig+0x128>
 800120e:	e010      	b.n	8001232 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7fe fff4 	bl	80001fc <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e04e      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ee      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d210      	bcs.n	8001262 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 0207 	bic.w	r2, r3, #7
 8001248:	4920      	ldr	r1, [pc, #128]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_RCC_ClockConfig+0x208>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d001      	beq.n	8001262 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e030      	b.n	80012c4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	4915      	ldr	r1, [pc, #84]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d009      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a0:	f000 f81c 	bl	80012dc <HAL_RCC_GetSysClockFreq>
 80012a4:	4601      	mov	r1, r0
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_RCC_ClockConfig+0x20c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_RCC_ClockConfig+0x210>)
 80012b2:	5cd3      	ldrb	r3, [r2, r3]
 80012b4:	fa21 f303 	lsr.w	r3, r1, r3
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_RCC_ClockConfig+0x214>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7fe ff5b 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	08003228 	.word	0x08003228
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012dc:	b490      	push	{r4, r7}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_RCC_GetSysClockFreq+0xb0>)
 80012e4:	1d3c      	adds	r4, r7, #4
 80012e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d002      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x40>
 8001316:	2b08      	cmp	r3, #8
 8001318:	d003      	beq.n	8001322 <HAL_RCC_GetSysClockFreq+0x46>
 800131a:	e02d      	b.n	8001378 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800131e:	623b      	str	r3, [r7, #32]
      break;
 8001320:	e02d      	b.n	800137e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	0c9b      	lsrs	r3, r3, #18
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800132e:	4413      	add	r3, r2
 8001330:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001334:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	0c5b      	lsrs	r3, r3, #17
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800134e:	4413      	add	r3, r2
 8001350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001354:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800135a:	fb02 f203 	mul.w	r2, r2, r3
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
 8001366:	e004      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4a0c      	ldr	r2, [pc, #48]	; (800139c <HAL_RCC_GetSysClockFreq+0xc0>)
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	623b      	str	r3, [r7, #32]
      break;
 8001376:	e002      	b.n	800137e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800137a:	623b      	str	r3, [r7, #32]
      break;
 800137c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137e:	6a3b      	ldr	r3, [r7, #32]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bc90      	pop	{r4, r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	08003214 	.word	0x08003214
 8001390:	08003224 	.word	0x08003224
 8001394:	40021000 	.word	0x40021000
 8001398:	007a1200 	.word	0x007a1200
 800139c:	003d0900 	.word	0x003d0900

080013a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000008 	.word	0x20000008

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b8:	f7ff fff2 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013bc:	4601      	mov	r1, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	08003238 	.word	0x08003238

080013dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013e4:	4601      	mov	r1, r0
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0adb      	lsrs	r3, r3, #11
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	08003238 	.word	0x08003238

08001404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <RCC_Delay+0x34>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <RCC_Delay+0x38>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0a5b      	lsrs	r3, r3, #9
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001420:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	60fa      	str	r2, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <RCC_Delay+0x1c>
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	10624dd3 	.word	0x10624dd3

08001440 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e01d      	b.n	800148e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f001 fc2a 	bl	8002cc0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3304      	adds	r3, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4610      	mov	r0, r2
 8001480:	f000 fa2a 	bl	80018d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fc1a 	bl	8001ce4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_TIM_PWM_Start+0x4c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d107      	bne.n	80014ca <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0201 	orr.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d101      	bne.n	8001506 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	e0bc      	b.n	8001680 <HAL_TIM_PWM_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10b      	bne.n	800152a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <HAL_TIM_PWM_Start_DMA+0x3a>
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0ae      	b.n	8001680 <HAL_TIM_PWM_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	f200 8089 	bhi.w	8001644 <HAL_TIM_PWM_Start_DMA+0x15c>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_TIM_PWM_Start_DMA+0x50>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	0800156d 	.word	0x0800156d
 800153c:	08001645 	.word	0x08001645
 8001540:	08001645 	.word	0x08001645
 8001544:	08001645 	.word	0x08001645
 8001548:	080015a3 	.word	0x080015a3
 800154c:	08001645 	.word	0x08001645
 8001550:	08001645 	.word	0x08001645
 8001554:	08001645 	.word	0x08001645
 8001558:	080015d9 	.word	0x080015d9
 800155c:	08001645 	.word	0x08001645
 8001560:	08001645 	.word	0x08001645
 8001564:	08001645 	.word	0x08001645
 8001568:	0800160f 	.word	0x0800160f
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	4a45      	ldr	r2, [pc, #276]	; (8001688 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 8001572:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	4a44      	ldr	r2, [pc, #272]	; (800168c <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800157a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3334      	adds	r3, #52	; 0x34
 8001588:	461a      	mov	r2, r3
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	f7fe ffa4 	bl	80004d8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159e:	60da      	str	r2, [r3, #12]
    }
    break;
 80015a0:	e051      	b.n	8001646 <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	4a38      	ldr	r2, [pc, #224]	; (8001688 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	4a37      	ldr	r2, [pc, #220]	; (800168c <HAL_TIM_PWM_Start_DMA+0x1a4>)
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3338      	adds	r3, #56	; 0x38
 80015be:	461a      	mov	r2, r3
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	f7fe ff89 	bl	80004d8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015d4:	60da      	str	r2, [r3, #12]
    }
    break;
 80015d6:	e036      	b.n	8001646 <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 80015de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	4a29      	ldr	r2, [pc, #164]	; (800168c <HAL_TIM_PWM_Start_DMA+0x1a4>)
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	333c      	adds	r3, #60	; 0x3c
 80015f4:	461a      	mov	r2, r3
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	f7fe ff6e 	bl	80004d8 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160a:	60da      	str	r2, [r3, #12]
    }
    break;
 800160c:	e01b      	b.n	8001646 <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 8001614:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1c      	ldr	r2, [pc, #112]	; (800168c <HAL_TIM_PWM_Start_DMA+0x1a4>)
 800161c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3340      	adds	r3, #64	; 0x40
 800162a:	461a      	mov	r2, r3
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	f7fe ff53 	bl	80004d8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001640:	60da      	str	r2, [r3, #12]
    }
    break;
 8001642:	e000      	b.n	8001646 <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 8001644:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fb48 	bl	8001ce4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_TIM_PWM_Start_DMA+0x1a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d107      	bne.n	800166e <HAL_TIM_PWM_Start_DMA+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08001869 	.word	0x08001869
 800168c:	08001845 	.word	0x08001845
 8001690:	40012c00 	.word	0x40012c00

08001694 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e0b4      	b.n	8001818 <HAL_TIM_PWM_ConfigChannel+0x184>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	f200 809f 	bhi.w	8001804 <HAL_TIM_PWM_ConfigChannel+0x170>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	08001701 	.word	0x08001701
 80016d0:	08001805 	.word	0x08001805
 80016d4:	08001805 	.word	0x08001805
 80016d8:	08001805 	.word	0x08001805
 80016dc:	08001741 	.word	0x08001741
 80016e0:	08001805 	.word	0x08001805
 80016e4:	08001805 	.word	0x08001805
 80016e8:	08001805 	.word	0x08001805
 80016ec:	08001783 	.word	0x08001783
 80016f0:	08001805 	.word	0x08001805
 80016f4:	08001805 	.word	0x08001805
 80016f8:	08001805 	.word	0x08001805
 80016fc:	080017c3 	.word	0x080017c3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f94c 	bl	80019a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0208 	orr.w	r2, r2, #8
 800171a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6999      	ldr	r1, [r3, #24]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	619a      	str	r2, [r3, #24]
    }
    break;
 800173e:	e062      	b.n	8001806 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f998 	bl	8001a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800175a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800176a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6999      	ldr	r1, [r3, #24]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	021a      	lsls	r2, r3, #8
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001780:	e041      	b.n	8001806 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f9e7 	bl	8001b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0208 	orr.w	r2, r2, #8
 800179c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0204 	bic.w	r2, r2, #4
 80017ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69d9      	ldr	r1, [r3, #28]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	61da      	str	r2, [r3, #28]
    }
    break;
 80017c0:	e021      	b.n	8001806 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa37 	bl	8001c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017dc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69d9      	ldr	r1, [r3, #28]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	61da      	str	r2, [r3, #28]
    }
    break;
 8001802:	e000      	b.n	8001806 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001804:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff ffe9 	bl	8001832 <HAL_TIM_ErrorCallback>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d103      	bne.n	8001890 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	771a      	strb	r2, [r3, #28]
 800188e:	e019      	b.n	80018c4 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d103      	bne.n	80018a2 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2202      	movs	r2, #2
 800189e:	771a      	strb	r2, [r3, #28]
 80018a0:	e010      	b.n	80018c4 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d103      	bne.n	80018b4 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2204      	movs	r2, #4
 80018b0:	771a      	strb	r2, [r3, #28]
 80018b2:	e007      	b.n	80018c4 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d102      	bne.n	80018c4 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2208      	movs	r2, #8
 80018c2:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff ffab 	bl	8001820 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	771a      	strb	r2, [r3, #28]
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <TIM_Base_SetConfig+0xc0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00b      	beq.n	800190c <TIM_Base_SetConfig+0x34>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fa:	d007      	beq.n	800190c <TIM_Base_SetConfig+0x34>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a27      	ldr	r2, [pc, #156]	; (800199c <TIM_Base_SetConfig+0xc4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d003      	beq.n	800190c <TIM_Base_SetConfig+0x34>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <TIM_Base_SetConfig+0xc8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d108      	bne.n	800191e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <TIM_Base_SetConfig+0xc0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00b      	beq.n	800193e <TIM_Base_SetConfig+0x66>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192c:	d007      	beq.n	800193e <TIM_Base_SetConfig+0x66>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <TIM_Base_SetConfig+0xc4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <TIM_Base_SetConfig+0x66>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <TIM_Base_SetConfig+0xc8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d108      	bne.n	8001950 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001956:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <TIM_Base_SetConfig+0xc0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d103      	bne.n	8001988 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	615a      	str	r2, [r3, #20]
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40012c00 	.word	0x40012c00
 800199c:	40000400 	.word	0x40000400
 80019a0:	40000800 	.word	0x40000800

080019a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	f023 0201 	bic.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f023 0302 	bic.w	r3, r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <TIM_OC1_SetConfig+0xd4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10c      	bne.n	8001a26 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f023 0308 	bic.w	r3, r3, #8
 8001a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <TIM_OC1_SetConfig+0xd4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d111      	bne.n	8001a52 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	621a      	str	r2, [r3, #32]
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40012c00 	.word	0x40012c00

08001a7c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f023 0210 	bic.w	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f023 0320 	bic.w	r3, r3, #32
 8001ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <TIM_OC2_SetConfig+0xdc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d10d      	bne.n	8001b04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b02:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <TIM_OC2_SetConfig+0xdc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d113      	bne.n	8001b34 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	621a      	str	r2, [r3, #32]
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40012c00 	.word	0x40012c00

08001b5c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <TIM_OC3_SetConfig+0xdc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10d      	bne.n	8001be2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001be0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <TIM_OC3_SetConfig+0xdc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d113      	bne.n	8001c12 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	621a      	str	r2, [r3, #32]
}
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40012c00 	.word	0x40012c00

08001c3c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c76:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c92:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	031b      	lsls	r3, r3, #12
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <TIM_OC4_SetConfig+0xa4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d109      	bne.n	8001cbc <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	621a      	str	r2, [r3, #32]
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40012c00 	.word	0x40012c00

08001ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a1a      	ldr	r2, [r3, #32]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	621a      	str	r2, [r3, #32]
}
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e044      	b.n	8001dce <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e032      	b.n	8001e56 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e0e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e30:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e03f      	b.n	8001ef2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 ffc8 	bl	8002e1c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 faab 	bl	8002400 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	4613      	mov	r3, r2
 8001f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d140      	bne.n	8001f96 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_UART_Receive_IT+0x26>
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e039      	b.n	8001f98 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Receive_IT+0x38>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e032      	b.n	8001f98 <HAL_UART_Receive_IT+0x9e>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	88fa      	ldrh	r2, [r7, #6]
 8001f44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2222      	movs	r2, #34	; 0x22
 8001f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f70:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x52>
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f984 	bl	80022fc <UART_Receive_IT>
      return;
 8001ff4:	e0cc      	b.n	8002190 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ab 	beq.w	8002154 <HAL_UART_IRQHandler+0x1b0>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_UART_IRQHandler+0x70>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80a0 	beq.w	8002154 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_UART_IRQHandler+0x90>
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_UART_IRQHandler+0xb0>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	f043 0202 	orr.w	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_UART_IRQHandler+0xd0>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_UART_IRQHandler+0xf0>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	f043 0208 	orr.w	r2, r3, #8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d078      	beq.n	800218e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_UART_IRQHandler+0x112>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f923 	bl	80022fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <HAL_UART_IRQHandler+0x13a>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d031      	beq.n	8002142 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f86e 	bl	80021c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d023      	beq.n	800213a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002100:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	2b00      	cmp	r3, #0
 8002108:	d013      	beq.n	8002132 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_UART_IRQHandler+0x1f4>)
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa3e 	bl	8000598 <HAL_DMA_Abort_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800212c:	4610      	mov	r0, r2
 800212e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	e00e      	b.n	8002150 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f83b 	bl	80021ae <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002138:	e00a      	b.n	8002150 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f837 	bl	80021ae <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	e006      	b.n	8002150 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f833 	bl	80021ae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800214e:	e01e      	b.n	800218e <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	bf00      	nop
    return;
 8002152:	e01c      	b.n	800218e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_UART_IRQHandler+0x1cc>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f85a 	bl	8002222 <UART_Transmit_IT>
    return;
 800216e:	e00f      	b.n	8002190 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_UART_IRQHandler+0x1ec>
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8a1 	bl	80022cc <UART_EndTransmit_IT>
    return;
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <HAL_UART_IRQHandler+0x1ec>
    return;
 800218e:	bf00      	nop
  }
}
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	080021fb 	.word	0x080021fb

0800219c <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff ffca 	bl	80021ae <HAL_UART_ErrorCallback>
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b21      	cmp	r3, #33	; 0x21
 8002234:	d144      	bne.n	80022c0 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223e:	d11a      	bne.n	8002276 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002254:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	1c9a      	adds	r2, r3, #2
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	621a      	str	r2, [r3, #32]
 8002268:	e00e      	b.n	8002288 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	621a      	str	r2, [r3, #32]
 8002274:	e008      	b.n	8002288 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6211      	str	r1, [r2, #32]
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4619      	mov	r1, r3
 8002296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10f      	bne.n	80022bc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e2:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff55 	bl	800219c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b22      	cmp	r3, #34	; 0x22
 800230e:	d171      	bne.n	80023f4 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002318:	d123      	bne.n	8002362 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	1c9a      	adds	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
 8002344:	e029      	b.n	800239a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
 8002360:	e01b      	b.n	800239a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6858      	ldr	r0, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6291      	str	r1, [r2, #40]	; 0x28
 800237a:	b2c2      	uxtb	r2, r0
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e00c      	b.n	800239a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	1c58      	adds	r0, r3, #1
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	6288      	str	r0, [r1, #40]	; 0x28
 8002392:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4619      	mov	r1, r3
 80023a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d120      	bne.n	80023f0 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0220 	bic.w	r2, r2, #32
 80023bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fbac 	bl	8002b44 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e002      	b.n	80023f6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002442:	f023 030c 	bic.w	r3, r3, #12
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6f      	ldr	r2, [pc, #444]	; (8002628 <UART_SetConfig+0x228>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d16b      	bne.n	8002548 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002470:	f7fe ffb4 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8002474:	4602      	mov	r2, r0
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009a      	lsls	r2, r3, #2
 800247e:	441a      	add	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4a68      	ldr	r2, [pc, #416]	; (800262c <UART_SetConfig+0x22c>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	011c      	lsls	r4, r3, #4
 8002494:	f7fe ffa2 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8002498:	4602      	mov	r2, r0
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009a      	lsls	r2, r3, #2
 80024a2:	441a      	add	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80024ae:	f7fe ff95 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <UART_SetConfig+0x22c>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	1aeb      	subs	r3, r5, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	3332      	adds	r3, #50	; 0x32
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <UART_SetConfig+0x22c>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e8:	441c      	add	r4, r3
 80024ea:	f7fe ff77 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fbb2 f5f3 	udiv	r5, r2, r3
 8002504:	f7fe ff6a 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8002508:	4602      	mov	r2, r0
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	009a      	lsls	r2, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4a43      	ldr	r2, [pc, #268]	; (800262c <UART_SetConfig+0x22c>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2264      	movs	r2, #100	; 0x64
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	1aeb      	subs	r3, r5, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	3332      	adds	r3, #50	; 0x32
 8002532:	4a3e      	ldr	r2, [pc, #248]	; (800262c <UART_SetConfig+0x22c>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4422      	add	r2, r4
 8002544:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002546:	e06a      	b.n	800261e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002548:	f7fe ff34 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 800254c:	4602      	mov	r2, r0
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009a      	lsls	r2, r3, #2
 8002556:	441a      	add	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <UART_SetConfig+0x22c>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	011c      	lsls	r4, r3, #4
 800256c:	f7fe ff22 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8002570:	4602      	mov	r2, r0
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	009a      	lsls	r2, r3, #2
 800257a:	441a      	add	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	fbb2 f5f3 	udiv	r5, r2, r3
 8002586:	f7fe ff15 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 800258a:	4602      	mov	r2, r0
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <UART_SetConfig+0x22c>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2264      	movs	r2, #100	; 0x64
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	1aeb      	subs	r3, r5, r3
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	3332      	adds	r3, #50	; 0x32
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <UART_SetConfig+0x22c>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c0:	441c      	add	r4, r3
 80025c2:	f7fe fef7 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80025dc:	f7fe feea 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	009a      	lsls	r2, r3, #2
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <UART_SetConfig+0x22c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	2264      	movs	r2, #100	; 0x64
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	1aeb      	subs	r3, r5, r3
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	3332      	adds	r3, #50	; 0x32
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <UART_SetConfig+0x22c>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4422      	add	r2, r4
 800261c:	609a      	str	r2, [r3, #8]
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bdb0      	pop	{r4, r5, r7, pc}
 8002626:	bf00      	nop
 8002628:	40013800 	.word	0x40013800
 800262c:	51eb851f 	.word	0x51eb851f

08002630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002636:	f7fd fd89 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800263a:	f000 f8a9 	bl	8002790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263e:	f000 fa35 	bl	8002aac <MX_GPIO_Init>
  MX_DMA_Init();
 8002642:	f000 fa15 	bl	8002a70 <MX_DMA_Init>
  MX_TIM1_Init();
 8002646:	f000 f8e9 	bl	800281c <MX_TIM1_Init>
  MX_TIM2_Init();
 800264a:	f000 f96d 	bl	8002928 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800264e:	f000 f9e5 	bl	8002a1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t nowTick = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  uint32_t pastTick = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  ws2812Begin(8);
 800265a:	2008      	movs	r0, #8
 800265c:	f000 fca4 	bl	8002fa8 <ws2812Begin>

  HAL_UART_Receive_IT(&huart1, rcvData, 1);
 8002660:	2201      	movs	r2, #1
 8002662:	4945      	ldr	r1, [pc, #276]	; (8002778 <main+0x148>)
 8002664:	4845      	ldr	r0, [pc, #276]	; (800277c <main+0x14c>)
 8002666:	f7ff fc48 	bl	8001efa <HAL_UART_Receive_IT>

//  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
//  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800266a:	2100      	movs	r1, #0
 800266c:	4844      	ldr	r0, [pc, #272]	; (8002780 <main+0x150>)
 800266e:	f7fe ff13 	bl	8001498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002672:	2104      	movs	r1, #4
 8002674:	4842      	ldr	r0, [pc, #264]	; (8002780 <main+0x150>)
 8002676:	f7fe ff0f 	bl	8001498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800267a:	2108      	movs	r1, #8
 800267c:	4840      	ldr	r0, [pc, #256]	; (8002780 <main+0x150>)
 800267e:	f7fe ff0b 	bl	8001498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002682:	210c      	movs	r1, #12
 8002684:	483e      	ldr	r0, [pc, #248]	; (8002780 <main+0x150>)
 8002686:	f7fe ff07 	bl	8001498 <HAL_TIM_PWM_Start>

#if(DEVICE == SHOOTER || DEVICE == TEST_SHOOTER)
  htim2.Instance->CCR1 = 113;
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <main+0x150>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2271      	movs	r2, #113	; 0x71
 8002690:	635a      	str	r2, [r3, #52]	; 0x34
  htim2.Instance->CCR2 = 110;
 8002692:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <main+0x150>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	226e      	movs	r2, #110	; 0x6e
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR3 = 110;
 800269a:	4b39      	ldr	r3, [pc, #228]	; (8002780 <main+0x150>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	226e      	movs	r2, #110	; 0x6e
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c
  htim2.Instance->CCR4 = 110;
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <main+0x150>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	226e      	movs	r2, #110	; 0x6e
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  nowTick = HAL_GetTick();
 80026aa:	f7fd fda7 	bl	80001fc <HAL_GetTick>
 80026ae:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart1, rcvData, 1);
 80026b0:	2201      	movs	r2, #1
 80026b2:	4931      	ldr	r1, [pc, #196]	; (8002778 <main+0x148>)
 80026b4:	4831      	ldr	r0, [pc, #196]	; (800277c <main+0x14c>)
 80026b6:	f7ff fc20 	bl	8001efa <HAL_UART_Receive_IT>
		  {
			  ws2812SetColor(i, 120, 120, 120);
		  }
	  }
#elif(DEVICE == TEST_SHOOTER)
	  if(nowTick - pastTick > 50)
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b32      	cmp	r3, #50	; 0x32
 80026c2:	d9f2      	bls.n	80026aa <main+0x7a>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80026c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026c8:	482e      	ldr	r0, [pc, #184]	; (8002784 <main+0x154>)
 80026ca:	f7fe fa85 	bl	8000bd8 <HAL_GPIO_TogglePin>
		  step++;
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <main+0x158>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a2c      	ldr	r2, [pc, #176]	; (8002788 <main+0x158>)
 80026d6:	6013      	str	r3, [r2, #0]
		  if(step < 200)
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <main+0x158>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2bc7      	cmp	r3, #199	; 0xc7
 80026de:	d807      	bhi.n	80026f0 <main+0xc0>
		  {
			  taskCount1=0;
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <main+0x15c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
			  htim2.Instance->CCR1 = 147;
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <main+0x150>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2293      	movs	r2, #147	; 0x93
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34
 80026ee:	e040      	b.n	8002772 <main+0x142>
		  }
		  else if(step < 500)
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <main+0x158>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026f8:	d207      	bcs.n	800270a <main+0xda>
		  {
			  taskCount1=0;
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <main+0x15c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
			  htim2.Instance->CCR1 = 107;
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <main+0x150>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	226b      	movs	r2, #107	; 0x6b
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
 8002708:	e033      	b.n	8002772 <main+0x142>
		  }
		  else if(step < 650)
 800270a:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <main+0x158>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f240 2289 	movw	r2, #649	; 0x289
 8002712:	4293      	cmp	r3, r2
 8002714:	d80f      	bhi.n	8002736 <main+0x106>
		  {
			  taskCount1++;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <main+0x15c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <main+0x15c>)
 800271e:	6013      	str	r3, [r2, #0]
			  htim2.Instance->CCR1 = 107;
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <main+0x150>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	226b      	movs	r2, #107	; 0x6b
 8002726:	635a      	str	r2, [r3, #52]	; 0x34
			  run_led_sequence(taskCount1 , BLINK);
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <main+0x15c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fa11 	bl	8002b56 <run_led_sequence>
 8002734:	e01d      	b.n	8002772 <main+0x142>
		  }
		  else if(step > 700)
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <main+0x158>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800273e:	d918      	bls.n	8002772 <main+0x142>
		  {
			  taskCount1=0;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <main+0x15c>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
			  step = 0;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <main+0x158>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
			  htim2.Instance->CCR1 = 147;
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <main+0x150>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2293      	movs	r2, #147	; 0x93
 8002752:	635a      	str	r2, [r3, #52]	; 0x34

			  for(uint32_t i  = 0; i < 28 ; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	e008      	b.n	800276c <main+0x13c>
			  {
				  ws2812SetColor(i, 0, 0, 0);
 800275a:	2300      	movs	r3, #0
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	68b8      	ldr	r0, [r7, #8]
 8002762:	f000 fc49 	bl	8002ff8 <ws2812SetColor>
			  for(uint32_t i  = 0; i < 28 ; i++)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3301      	adds	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b1b      	cmp	r3, #27
 8002770:	d9f3      	bls.n	800275a <main+0x12a>
			  }
		  }
		  pastTick = nowTick;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60fb      	str	r3, [r7, #12]
	  nowTick = HAL_GetTick();
 8002776:	e798      	b.n	80026aa <main+0x7a>
 8002778:	20000028 	.word	0x20000028
 800277c:	20001a24 	.word	0x20001a24
 8002780:	20001aa4 	.word	0x20001aa4
 8002784:	40010c00 	.word	0x40010c00
 8002788:	20000034 	.word	0x20000034
 800278c:	20000038 	.word	0x20000038

08002790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b090      	sub	sp, #64	; 0x40
 8002794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002796:	f107 0318 	add.w	r3, r7, #24
 800279a:	2228      	movs	r2, #40	; 0x28
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fd24 	bl	80031ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c4:	2302      	movs	r3, #2
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fa0f 	bl	8000bfc <HAL_RCC_OscConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80027e4:	f000 fa34 	bl	8002c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e8:	230f      	movs	r3, #15
 80027ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ec:	2302      	movs	r3, #2
 80027ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc5e 	bl	80010c4 <HAL_RCC_ClockConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800280e:	f000 fa1f 	bl	8002c50 <Error_Handler>
  }
}
 8002812:	bf00      	nop
 8002814:	3740      	adds	r7, #64	; 0x40
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b090      	sub	sp, #64	; 0x40
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002840:	463b      	mov	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002852:	4b33      	ldr	r3, [pc, #204]	; (8002920 <MX_TIM1_Init+0x104>)
 8002854:	4a33      	ldr	r2, [pc, #204]	; (8002924 <MX_TIM1_Init+0x108>)
 8002856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <MX_TIM1_Init+0x104>)
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <MX_TIM1_Init+0x104>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 93;
 8002864:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <MX_TIM1_Init+0x104>)
 8002866:	225d      	movs	r2, #93	; 0x5d
 8002868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <MX_TIM1_Init+0x104>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <MX_TIM1_Init+0x104>)
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <MX_TIM1_Init+0x104>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800287c:	4828      	ldr	r0, [pc, #160]	; (8002920 <MX_TIM1_Init+0x104>)
 800287e:	f7fe fddf 	bl	8001440 <HAL_TIM_PWM_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002888:	f000 f9e2 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002894:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002898:	4619      	mov	r1, r3
 800289a:	4821      	ldr	r0, [pc, #132]	; (8002920 <MX_TIM1_Init+0x104>)
 800289c:	f7ff fa9c 	bl	8001dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80028a6:	f000 f9d3 	bl	8002c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028aa:	2360      	movs	r3, #96	; 0x60
 80028ac:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	2200      	movs	r2, #0
 80028cc:	4619      	mov	r1, r3
 80028ce:	4814      	ldr	r0, [pc, #80]	; (8002920 <MX_TIM1_Init+0x104>)
 80028d0:	f7fe fee0 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80028da:	f000 f9b9 	bl	8002c50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <MX_TIM1_Init+0x104>)
 8002902:	f7ff fa11 	bl	8001d28 <HAL_TIMEx_ConfigBreakDeadTime>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800290c:	f000 f9a0 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <MX_TIM1_Init+0x104>)
 8002912:	f000 fa31 	bl	8002d78 <HAL_TIM_MspPostInit>

}
 8002916:	bf00      	nop
 8002918:	3740      	adds	r7, #64	; 0x40
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20001a64 	.word	0x20001a64
 8002924:	40012c00 	.word	0x40012c00

08002928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	615a      	str	r2, [r3, #20]
 8002948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <MX_TIM2_Init+0xf0>)
 800294c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <MX_TIM2_Init+0xf0>)
 8002954:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002958:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <MX_TIM2_Init+0xf0>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <MX_TIM2_Init+0xf0>)
 8002962:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002966:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <MX_TIM2_Init+0xf0>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <MX_TIM2_Init+0xf0>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002974:	4828      	ldr	r0, [pc, #160]	; (8002a18 <MX_TIM2_Init+0xf0>)
 8002976:	f7fe fd63 	bl	8001440 <HAL_TIM_PWM_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002980:	f000 f966 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298c:	f107 0320 	add.w	r3, r7, #32
 8002990:	4619      	mov	r1, r3
 8002992:	4821      	ldr	r0, [pc, #132]	; (8002a18 <MX_TIM2_Init+0xf0>)
 8002994:	f7ff fa20 	bl	8001dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800299e:	f000 f957 	bl	8002c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a2:	2360      	movs	r3, #96	; 0x60
 80029a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4817      	ldr	r0, [pc, #92]	; (8002a18 <MX_TIM2_Init+0xf0>)
 80029ba:	f7fe fe6b 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80029c4:	f000 f944 	bl	8002c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2204      	movs	r2, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4812      	ldr	r0, [pc, #72]	; (8002a18 <MX_TIM2_Init+0xf0>)
 80029d0:	f7fe fe60 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80029da:	f000 f939 	bl	8002c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2208      	movs	r2, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	; (8002a18 <MX_TIM2_Init+0xf0>)
 80029e6:	f7fe fe55 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80029f0:	f000 f92e 	bl	8002c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	220c      	movs	r2, #12
 80029f8:	4619      	mov	r1, r3
 80029fa:	4807      	ldr	r0, [pc, #28]	; (8002a18 <MX_TIM2_Init+0xf0>)
 80029fc:	f7fe fe4a 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002a06:	f000 f923 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a0a:	4803      	ldr	r0, [pc, #12]	; (8002a18 <MX_TIM2_Init+0xf0>)
 8002a0c:	f000 f9b4 	bl	8002d78 <HAL_TIM_MspPostInit>

}
 8002a10:	bf00      	nop
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20001aa4 	.word	0x20001aa4

08002a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <MX_USART1_UART_Init+0x50>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_USART1_UART_Init+0x4c>)
 8002a54:	f7ff fa04 	bl	8001e60 <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a5e:	f000 f8f7 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20001a24 	.word	0x20001a24
 8002a6c:	40013800 	.word	0x40013800

08002a70 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <MX_DMA_Init+0x38>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <MX_DMA_Init+0x38>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6153      	str	r3, [r2, #20]
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_DMA_Init+0x38>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	200c      	movs	r0, #12
 8002a94:	f7fd fc8f 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002a98:	200c      	movs	r0, #12
 8002a9a:	f7fd fca8 	bl	80003ee <HAL_NVIC_EnableIRQ>

}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002ac6:	f043 0320 	orr.w	r3, r3, #32
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_GPIO_Init+0x90>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b0e:	480c      	ldr	r0, [pc, #48]	; (8002b40 <MX_GPIO_Init+0x94>)
 8002b10:	f7fe f84a 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <MX_GPIO_Init+0x94>)
 8002b2e:	f7fd fedd 	bl	80008ec <HAL_GPIO_Init>

}
 8002b32:	bf00      	nop
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010c00 	.word	0x40010c00

08002b44 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

uint8_t state = 0;
uint8_t rcv = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
			}
#endif


	}
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <run_led_sequence>:
		state = 0;
	}
}

void run_led_sequence(uint32_t count, uint8_t type)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
	if(type == BLINK)
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d124      	bne.n	8002bb2 <run_led_sequence+0x5c>
	{
		if(count%2 == 0)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <run_led_sequence+0x3c>
		{
			  for(uint32_t i = 0; i < 40; i ++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e008      	b.n	8002b8a <run_led_sequence+0x34>
			  {
					ws2812SetColor(i, 0, 0, 0);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	69f8      	ldr	r0, [r7, #28]
 8002b80:	f000 fa3a 	bl	8002ff8 <ws2812SetColor>
			  for(uint32_t i = 0; i < 40; i ++)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	3301      	adds	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b27      	cmp	r3, #39	; 0x27
 8002b8e:	d9f3      	bls.n	8002b78 <run_led_sequence+0x22>
			else
				ws2812SetColor(i, 0, 0, 0);
		}
	}

}
 8002b90:	e05a      	b.n	8002c48 <run_led_sequence+0xf2>
			  for(uint32_t i = 0; i < 40; i ++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e008      	b.n	8002baa <run_led_sequence+0x54>
					ws2812SetColor(i, (uint8_t)255, (uint8_t)255, (uint8_t)255);
 8002b98:	23ff      	movs	r3, #255	; 0xff
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	21ff      	movs	r1, #255	; 0xff
 8002b9e:	69b8      	ldr	r0, [r7, #24]
 8002ba0:	f000 fa2a 	bl	8002ff8 <ws2812SetColor>
			  for(uint32_t i = 0; i < 40; i ++)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b27      	cmp	r3, #39	; 0x27
 8002bae:	d9f3      	bls.n	8002b98 <run_led_sequence+0x42>
}
 8002bb0:	e04a      	b.n	8002c48 <run_led_sequence+0xf2>
	else if(type == SMOOTH)
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d111      	bne.n	8002bdc <run_led_sequence+0x86>
		uint8_t value = (uint8_t)count;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	72bb      	strb	r3, [r7, #10]
		for(uint32_t i = 0; i < 40; i ++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e008      	b.n	8002bd4 <run_led_sequence+0x7e>
			ws2812SetColor(i, value, value, value);
 8002bc2:	7abb      	ldrb	r3, [r7, #10]
 8002bc4:	7aba      	ldrb	r2, [r7, #10]
 8002bc6:	7ab9      	ldrb	r1, [r7, #10]
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f000 fa15 	bl	8002ff8 <ws2812SetColor>
		for(uint32_t i = 0; i < 40; i ++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b27      	cmp	r3, #39	; 0x27
 8002bd8:	d9f3      	bls.n	8002bc2 <run_led_sequence+0x6c>
}
 8002bda:	e035      	b.n	8002c48 <run_led_sequence+0xf2>
	else if(type == BLUE_SMOOTH)
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d115      	bne.n	8002c0e <run_led_sequence+0xb8>
		uint8_t value = (uint8_t)count;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	72fb      	strb	r3, [r7, #11]
		for(uint32_t i = 0; i < 40; i ++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e00c      	b.n	8002c06 <run_led_sequence+0xb0>
			ws2812SetColor(i, (value >> 2), (value >> 2), value);
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	b2d9      	uxtb	r1, r3
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	6938      	ldr	r0, [r7, #16]
 8002bfc:	f000 f9fc 	bl	8002ff8 <ws2812SetColor>
		for(uint32_t i = 0; i < 40; i ++)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	3301      	adds	r3, #1
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b27      	cmp	r3, #39	; 0x27
 8002c0a:	d9ef      	bls.n	8002bec <run_led_sequence+0x96>
}
 8002c0c:	e01c      	b.n	8002c48 <run_led_sequence+0xf2>
	else if(type == CIRCLE)
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d119      	bne.n	8002c48 <run_led_sequence+0xf2>
		for(uint32_t i = 0; i < 24; i ++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e013      	b.n	8002c42 <run_led_sequence+0xec>
			if(i == count)
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d106      	bne.n	8002c30 <run_led_sequence+0xda>
				ws2812SetColor(i, 255, 255, 255);
 8002c22:	23ff      	movs	r3, #255	; 0xff
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	21ff      	movs	r1, #255	; 0xff
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f9e5 	bl	8002ff8 <ws2812SetColor>
 8002c2e:	e005      	b.n	8002c3c <run_led_sequence+0xe6>
				ws2812SetColor(i, 0, 0, 0);
 8002c30:	2300      	movs	r3, #0
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f9de 	bl	8002ff8 <ws2812SetColor>
		for(uint32_t i = 0; i < 24; i ++)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b17      	cmp	r3, #23
 8002c46:	d9e8      	bls.n	8002c1a <run_led_sequence+0xc4>
}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_MspInit+0x5c>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_MspInit+0x5c>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6193      	str	r3, [r2, #24]
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_MspInit+0x5c>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_MspInit+0x5c>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_MspInit+0x5c>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_MspInit+0x5c>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_MspInit+0x60>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_MspInit+0x60>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40010000 	.word	0x40010000

08002cc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_TIM_PWM_MspInit+0xa8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d134      	bne.n	8002d3c <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <HAL_TIM_PWM_MspInit+0xac>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <HAL_TIM_PWM_MspInit+0xac>)
 8002cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cdc:	6193      	str	r3, [r2, #24]
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_TIM_PWM_MspInit+0xac>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cec:	4a21      	ldr	r2, [pc, #132]	; (8002d74 <HAL_TIM_PWM_MspInit+0xb4>)
 8002cee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d08:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d10:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d14:	2220      	movs	r2, #32
 8002d16:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d20:	f7fd fb80 	bl	8000424 <HAL_DMA_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8002d2a:	f7ff ff91 	bl	8002c50 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d3a:	e010      	b.n	8002d5e <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d10b      	bne.n	8002d5e <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_TIM_PWM_MspInit+0xac>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <HAL_TIM_PWM_MspInit+0xac>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_TIM_PWM_MspInit+0xac>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	200019e0 	.word	0x200019e0
 8002d74:	4002001c 	.word	0x4002001c

08002d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_TIM_MspPostInit+0x98>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d119      	bne.n	8002dcc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_TIM_MspPostInit+0x9c>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_TIM_MspPostInit+0x9c>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_TIM_MspPostInit+0x9c>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4814      	ldr	r0, [pc, #80]	; (8002e18 <HAL_TIM_MspPostInit+0xa0>)
 8002dc6:	f7fd fd91 	bl	80008ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dca:	e01c      	b.n	8002e06 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d117      	bne.n	8002e06 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_TIM_MspPostInit+0x9c>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_TIM_MspPostInit+0x9c>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6193      	str	r3, [r2, #24]
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_TIM_MspPostInit+0x9c>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002dee:	230f      	movs	r3, #15
 8002df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4805      	ldr	r0, [pc, #20]	; (8002e18 <HAL_TIM_MspPostInit+0xa0>)
 8002e02:	f7fd fd73 	bl	80008ec <HAL_GPIO_Init>
}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010800 	.word	0x40010800

08002e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_UART_MspInit+0x9c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d139      	bne.n	8002eb0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_UART_MspInit+0xa0>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_UART_MspInit+0xa0>)
 8002e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_UART_MspInit+0xa0>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_UART_MspInit+0xa0>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_UART_MspInit+0xa0>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_UART_MspInit+0xa0>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4619      	mov	r1, r3
 8002e80:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <HAL_UART_MspInit+0xa4>)
 8002e82:	f7fd fd33 	bl	80008ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <HAL_UART_MspInit+0xa4>)
 8002e9c:	f7fd fd26 	bl	80008ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2025      	movs	r0, #37	; 0x25
 8002ea6:	f7fd fa86 	bl	80003b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eaa:	2025      	movs	r0, #37	; 0x25
 8002eac:	f7fd fa9f 	bl	80003ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010800 	.word	0x40010800

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <HardFault_Handler+0x4>

08002ed6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <MemManage_Handler+0x4>

08002edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <BusFault_Handler+0x4>

08002ee2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <UsageFault_Handler+0x4>

08002ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f10:	f7fd f962 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <DMA1_Channel2_IRQHandler+0x10>)
 8002f1e:	f7fd fbb1 	bl	8000684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200019e0 	.word	0x200019e0

08002f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <USART1_IRQHandler+0x10>)
 8002f32:	f7ff f837 	bl	8001fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20001a24 	.word	0x20001a24

08002f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <SystemInit+0x5c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <SystemInit+0x5c>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <SystemInit+0x5c>)
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4911      	ldr	r1, [pc, #68]	; (8002f9c <SystemInit+0x5c>)
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <SystemInit+0x60>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <SystemInit+0x5c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <SystemInit+0x5c>)
 8002f62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <SystemInit+0x5c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <SystemInit+0x5c>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <SystemInit+0x5c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <SystemInit+0x5c>)
 8002f7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002f82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <SystemInit+0x5c>)
 8002f86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SystemInit+0x64>)
 8002f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f92:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	f8ff0000 	.word	0xf8ff0000
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <ws2812Begin>:

  return true;
}

void ws2812Begin(uint32_t led_cnt)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)led_buf, (100 +  24 * 50));
 8002fb0:	f240 5314 	movw	r3, #1300	; 0x514
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <ws2812Begin+0x44>)
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <ws2812Begin+0x48>)
 8002fba:	f7fe fa95 	bl	80014e8 <HAL_TIM_PWM_Start_DMA>
  for(int i = 0 ; i < 100; i ++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e00c      	b.n	8002fde <ws2812Begin+0x36>
  {
	  led_buf[i] = 0;
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <ws2812Begin+0x44>)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  led_buf2[i] = 0;
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <ws2812Begin+0x4c>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0 ; i < 100; i ++)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b63      	cmp	r3, #99	; 0x63
 8002fe2:	ddef      	ble.n	8002fc4 <ws2812Begin+0x1c>
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000003c 	.word	0x2000003c
 8002ff0:	20001a64 	.word	0x20001a64
 8002ff4:	20000d0c 	.word	0x20000d0c

08002ff8 <ws2812SetColor>:
		ws2812SetColor2(i, 0, 0, 0);
	}
}

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b09f      	sub	sp, #124	; 0x7c
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	70fb      	strb	r3, [r7, #3]
 800300a:	460b      	mov	r3, r1
 800300c:	70bb      	strb	r3, [r7, #2]
 800300e:	4613      	mov	r3, r2
 8003010:	707b      	strb	r3, [r7, #1]
  uint32_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	677b      	str	r3, [r7, #116]	; 0x74
 8003016:	e04a      	b.n	80030ae <ws2812SetColor+0xb6>
  {
    if (red & (1<<7))
 8003018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301c:	2b00      	cmp	r3, #0
 800301e:	da08      	bge.n	8003032 <ws2812SetColor+0x3a>
    {
      r_bit[i] = BIT_HIGH;
 8003020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003028:	4413      	add	r3, r2
 800302a:	2238      	movs	r2, #56	; 0x38
 800302c:	f843 2c2c 	str.w	r2, [r3, #-44]
 8003030:	e007      	b.n	8003042 <ws2812SetColor+0x4a>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800303a:	4413      	add	r3, r2
 800303c:	221c      	movs	r2, #28
 800303e:	f843 2c2c 	str.w	r2, [r3, #-44]
    }
    red <<= 1;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8003048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da08      	bge.n	8003062 <ws2812SetColor+0x6a>
    {
      g_bit[i] = BIT_HIGH;
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003058:	4413      	add	r3, r2
 800305a:	2238      	movs	r2, #56	; 0x38
 800305c:	f843 2c4c 	str.w	r2, [r3, #-76]
 8003060:	e007      	b.n	8003072 <ws2812SetColor+0x7a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8003062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800306a:	4413      	add	r3, r2
 800306c:	221c      	movs	r2, #28
 800306e:	f843 2c4c 	str.w	r2, [r3, #-76]
    }
    green <<= 1;
 8003072:	78bb      	ldrb	r3, [r7, #2]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8003078:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da08      	bge.n	8003092 <ws2812SetColor+0x9a>
    {
      b_bit[i] = BIT_HIGH;
 8003080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003088:	4413      	add	r3, r2
 800308a:	2238      	movs	r2, #56	; 0x38
 800308c:	f843 2c6c 	str.w	r2, [r3, #-108]
 8003090:	e007      	b.n	80030a2 <ws2812SetColor+0xaa>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8003092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800309a:	4413      	add	r3, r2
 800309c:	221c      	movs	r2, #28
 800309e:	f843 2c6c 	str.w	r2, [r3, #-108]
    }
    blue <<= 1;
 80030a2:	787b      	ldrb	r3, [r7, #1]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 80030a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030aa:	3301      	adds	r3, #1
 80030ac:	677b      	str	r3, [r7, #116]	; 0x74
 80030ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	ddb1      	ble.n	8003018 <ws2812SetColor+0x20>
  }

  offset = 100;
 80030b4:	2364      	movs	r3, #100	; 0x64
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  for(int i = 0 ; i < 8; i ++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	673b      	str	r3, [r7, #112]	; 0x70
 80030bc:	e042      	b.n	8003144 <ws2812SetColor+0x14c>
  {
	  led_buf[offset + index*24 + i] 		= g_bit[i];
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030cc:	441a      	add	r2, r3
 80030ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d0:	441a      	add	r2, r3
 80030d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80030da:	440b      	add	r3, r1
 80030dc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80030e0:	491c      	ldr	r1, [pc, #112]	; (8003154 <ws2812SetColor+0x15c>)
 80030e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  led_buf[offset + index*24 + 8 +  i] 	= r_bit[i];
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	441a      	add	r2, r3
 80030f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f8:	4413      	add	r3, r2
 80030fa:	f103 0208 	add.w	r2, r3, #8
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003106:	440b      	add	r3, r1
 8003108:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800310c:	4911      	ldr	r1, [pc, #68]	; (8003154 <ws2812SetColor+0x15c>)
 800310e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  led_buf[offset + index*24 + 16 + i] 	= b_bit[i];
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	461a      	mov	r2, r3
 800311e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003120:	441a      	add	r2, r3
 8003122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003124:	4413      	add	r3, r2
 8003126:	f103 0210 	add.w	r2, r3, #16
 800312a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003132:	440b      	add	r3, r1
 8003134:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <ws2812SetColor+0x15c>)
 800313a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  for(int i = 0 ; i < 8; i ++)
 800313e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003140:	3301      	adds	r3, #1
 8003142:	673b      	str	r3, [r7, #112]	; 0x70
 8003144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003146:	2b07      	cmp	r3, #7
 8003148:	ddb9      	ble.n	80030be <ws2812SetColor+0xc6>
  }
//  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
//  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
//  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
}
 800314a:	bf00      	nop
 800314c:	377c      	adds	r7, #124	; 0x7c
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	2000003c 	.word	0x2000003c

08003158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003158:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800315a:	e003      	b.n	8003164 <LoopCopyDataInit>

0800315c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800315e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003160:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003162:	3104      	adds	r1, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003164:	480a      	ldr	r0, [pc, #40]	; (8003190 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003168:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800316a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800316c:	d3f6      	bcc.n	800315c <CopyDataInit>
  ldr r2, =_sbss
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003170:	e002      	b.n	8003178 <LoopFillZerobss>

08003172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003174:	f842 3b04 	str.w	r3, [r2], #4

08003178 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800317a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800317c:	d3f9      	bcc.n	8003172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800317e:	f7ff fedf 	bl	8002f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003182:	f000 f80f 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003186:	f7ff fa53 	bl	8002630 <main>
  bx lr
 800318a:	4770      	bx	lr
  ldr r3, =_sidata
 800318c:	08003248 	.word	0x08003248
  ldr r0, =_sdata
 8003190:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003194:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003198:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800319c:	20001ae4 	.word	0x20001ae4

080031a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC1_2_IRQHandler>
	...

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2500      	movs	r5, #0
 80031a8:	4e0c      	ldr	r6, [pc, #48]	; (80031dc <__libc_init_array+0x38>)
 80031aa:	4c0d      	ldr	r4, [pc, #52]	; (80031e0 <__libc_init_array+0x3c>)
 80031ac:	1ba4      	subs	r4, r4, r6
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	42a5      	cmp	r5, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	f000 f822 	bl	80031fc <_init>
 80031b8:	2500      	movs	r5, #0
 80031ba:	4e0a      	ldr	r6, [pc, #40]	; (80031e4 <__libc_init_array+0x40>)
 80031bc:	4c0a      	ldr	r4, [pc, #40]	; (80031e8 <__libc_init_array+0x44>)
 80031be:	1ba4      	subs	r4, r4, r6
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	42a5      	cmp	r5, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031cc:	4798      	blx	r3
 80031ce:	3501      	adds	r5, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d6:	4798      	blx	r3
 80031d8:	3501      	adds	r5, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003240 	.word	0x08003240
 80031e0:	08003240 	.word	0x08003240
 80031e4:	08003240 	.word	0x08003240
 80031e8:	08003244 	.word	0x08003244

080031ec <memset>:
 80031ec:	4603      	mov	r3, r0
 80031ee:	4402      	add	r2, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <_init>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr

08003208 <_fini>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr
